P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power_vector= c(power_vector, rej_95)
}
power_list[[as.character(i)]] <- power_vector
}
}
}
}
}
# Data generation
E = c(rep(0,(1-prop_e)*N), rep(1,prop_e*N))
Y = ifelse(E==1, sapply(E,function(pe){rbinom(1,1,pi_e)}),
sapply(E,function(pne){rbinom(1,1,pi_ne)}))
dati = cbind(E,Y)
A = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_A_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_A_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_A_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_A_ne)}), A))))
B = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
rm(list=ls())
library(data.table)
### Parameters that affect variability
proportion_of_exposed = c(0.05, 0.2)  #prop_e
prevalence_non_exposed = c(0.05, 0.2) #pi_ne
risk_vector = c(1.2, 2)  #risk
sensitivity_A_exposed <- c(0.4, 0.5, 0.6)
sensitivity_A <- list(list(exposed = 0.9, non_exposed = 0.65),
list(exposed = 0.4, non_exposed = 0.65))
sensitivity_B <- list(list(exposed = 0.9, non_exposed = 0.75),
list(exposed = 0.4, non_exposed = 0.5))
Data_generation <- c("binomial")#, "fixed")
### Fixed Parameters
N = 10000
sample_size = 250
SE_A_ne = 0.7
SP_A_e = 0.99
SP_B_e = 0.95
SP_A_ne = 0.99
SP_B_ne = 0.95
compination <- data.table(n = integer(0),
proportion_e = character(0),
prevalence_ne = character(0),
sensitivity_B_e = character(0),
sensitivity_A_ne = character(0),
sensitivity_B_ne = character(0),
col_risk = character(0),
data_gen  = character(0))
power_list <- vector(mode = "list")
i <- 0
for (prop_e in proportion_of_exposed) {
for (pi_ne in prevalence_non_exposed) {
for (risk in risk_vector) {
for (SE_B in sensitivity_B) {
for (d_gen in Data_generation) {
power_vector <- c()
i <- i + 1
print(i)
SE_B_e = SE_B$exposed
SE_B_ne = SE_B$exposed
pi_e = pi_ne*risk
compination <- rbind(compination,
data.table(n = i,
proportion_e = prop_e,
prevalence_ne = pi_ne,
sensitivity_B_e = SE_B_e,
sensitivity_A_ne = SE_A_ne,
sensitivity_B_ne = SE_B_ne,
col_risk = risk,
data_gen  = d_gen))
for (SE_A_e in sensitivity_A_exposed) {
if (d_gen == "fixed") {
}else{
# Data generation
E = c(rep(0,(1-prop_e)*N), rep(1,prop_e*N))
Y = ifelse(E==1, sapply(E,function(pe){rbinom(1,1,pi_e)}),
sapply(E,function(pne){rbinom(1,1,pi_ne)}))
dati = cbind(E,Y)
A = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_A_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_A_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_A_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_A_ne)}), A))))
B = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
}
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
n=nb= sample_size
nsam = 1000
P_A_e = sum(A==1&E==1)/sum(E==1)
P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power_vector= c(power_vector, rej_95)
}
power_list[[as.character(i)]] <- power_vector
}
}
}
}
}
View(power_list)
TX_boot2
c1
PPV_B_e2
sam_Ya_boot
PPV_A_e0
PPV_B_e0
PPV_A_ne0
PPV_B_ne0
sam_Yb1
matrix_B
matrix_B
matrix_B
Y[B==1]
n_iter <- length(proportion_of_exposed)*length(prevalence_non_exposed)*length(risk_vector)*length(sensitivity_B)*length(Data_generation)*length(sensitivity_A_exposed)
n_iter
print(pasteo(i, "/", as.character(n_iter)))
print(paste0(i, "/", as.character(n_iter)))
cat(paste0(i, "/", as.character(n_iter), "/n"))
SE_B_e = SE_B$exposed
cat(paste0(i, "/", as.character(n_iter), "\n"))
SE_B_e = SE_B$exposed
SE_B_ne = SE_B$exposed
cat(paste0(i, "/", as.character(n_iter), "\n"))
cat(paste0(i, "/", as.character(n_iter), "\n"))
cat(paste0(i, "/", as.character(n_iter), "\n"))
for (prop_e in proportion_of_exposed) {
for (pi_ne in prevalence_non_exposed) {
for (risk in risk_vector) {
for (SE_B in sensitivity_B) {
for (d_gen in Data_generation) {
power_vector <- c()
i <- i + 1
cat(paste0(i, "/", as.character(n_iter), "\n"))
SE_B_e = SE_B$exposed
SE_B_ne = SE_B$exposed
pi_e = pi_ne*risk
compination <- rbind(compination,
data.table(n = i,
proportion_e = prop_e,
prevalence_ne = pi_ne,
sensitivity_B_e = SE_B_e,
sensitivity_A_ne = SE_A_ne,
sensitivity_B_ne = SE_B_ne,
col_risk = risk,
data_gen  = d_gen))
for (SE_A_e in sensitivity_A_exposed) {
if (d_gen == "fixed") {
}else{
# Data generation
E = c(rep(0,(1-prop_e)*N), rep(1,prop_e*N))
Y = ifelse(E==1, sapply(E,function(pe){rbinom(1,1,pi_e)}),
sapply(E,function(pne){rbinom(1,1,pi_ne)}))
dati = cbind(E,Y)
A = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_A_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_A_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_A_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_A_ne)}), A))))
B = NA
B = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
}
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
n=nb= sample_size
nsam = 1000
P_A_e = sum(A==1&E==1)/sum(E==1)
P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power_vector= c(power_vector, rej_95)
}
power_list[[as.character(i)]] <- power_vector
}
}
}
}
}
###  Analysis of the variability of the test power
#
#  7 february 2022
rm(list=ls())
library(data.table)
### Parameters that affect variability
proportion_of_exposed = c(0.05, 0.2)  #prop_e
prevalence_non_exposed = c(0.05, 0.2) #pi_ne
risk_vector = c(1.2, 2)  #risk
sensitivity_A_exposed <- c(0.4, 0.5, 0.6)
sensitivity_A <- list(list(exposed = 0.9, non_exposed = 0.65),
list(exposed = 0.4, non_exposed = 0.65))
sensitivity_B <- list(list(exposed = 0.9, non_exposed = 0.75),
list(exposed = 0.4, non_exposed = 0.5))
Data_generation <- c("binomial")#, "fixed")
### Fixed Parameters
N = 10000
sample_size = 250
SE_A_ne = 0.7
SP_A_e = 0.99
SP_B_e = 0.95
SP_A_ne = 0.99
SP_B_ne = 0.95
compination <- data.table(n = integer(0),
proportion_e = character(0),
prevalence_ne = character(0),
sensitivity_B_e = character(0),
sensitivity_A_ne = character(0),
sensitivity_B_ne = character(0),
col_risk = character(0),
data_gen  = character(0))
power_list <- vector(mode = "list")
i <- 0
n_iter <- length(proportion_of_exposed)*length(prevalence_non_exposed)*length(risk_vector)*length(sensitivity_B)*length(Data_generation)*length(sensitivity_A_exposed)
for (prop_e in proportion_of_exposed) {
for (pi_ne in prevalence_non_exposed) {
for (risk in risk_vector) {
for (SE_B in sensitivity_B) {
for (d_gen in Data_generation) {
power_vector <- c()
i <- i + 1
cat(paste0(i, "/", as.character(n_iter), "\n"))
SE_B_e = SE_B$exposed
SE_B_ne = SE_B$exposed
pi_e = pi_ne*risk
compination <- rbind(compination,
data.table(n = i,
proportion_e = prop_e,
prevalence_ne = pi_ne,
sensitivity_B_e = SE_B_e,
sensitivity_A_ne = SE_A_ne,
sensitivity_B_ne = SE_B_ne,
col_risk = risk,
data_gen  = d_gen))
for (SE_A_e in sensitivity_A_exposed) {
if (d_gen == "fixed") {
}else{
# Data generation
E = c(rep(0,(1-prop_e)*N), rep(1,prop_e*N))
Y = ifelse(E==1, sapply(E,function(pe){rbinom(1,1,pi_e)}),
sapply(E,function(pne){rbinom(1,1,pi_ne)}))
dati = cbind(E,Y)
A = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_A_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_A_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_A_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_A_ne)}), A))))
B = NA
B = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
}
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
n=nb= sample_size
nsam = 1000
P_A_e = sum(A==1&E==1)/sum(E==1)
P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power_vector= c(power_vector, rej_95)
}
power_list[[as.character(i)]] <- power_vector
}
}
}
}
}
View(power_list)
