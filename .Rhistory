t_vector <- c(t_vector, t)
}
}else{
t_vector = c()
for (boot in 1:N_boot) {
bootstrap_sample_A_e <- rbinom(n_validated_A_e, 1, PPV_A_e)
bootstrap_sample_B_e <- rbinom(n_validated_B_e, 1, PPV_B_e)
bootstrap_sample_AintB_e <- rbinom(n_validated_AintB_e, 1, PPV_AintB_e)
bootstrap_sample_A_ne <- rbinom(n_validated_A, 1, PPV_A_ne)
bootstrap_sample_B_ne <- rbinom(n_validated_B, 1, PPV_B_ne)
bootstrap_sample_AintB_ne <- rbinom(n_validated_AintB_ne, 1, PPV_AintB_ne)
t <- statistic_with_C_sample(P_A_e,
P_B_e,
P_AintB_e,
P_A_ne,
P_B_ne,
P_AintB_ne,
sum(bootstrap_sample_A_e)/n_validated_A_e,
sum(bootstrap_sample_B_e)/n_validated_B_e,
sum(bootstrap_sample_AintB_e)/n_validated_AintB_e,
sum(bootstrap_sample_A_ne)/n_validated_A_ne,
sum(bootstrap_sample_B_ne)/n_validated_B_ne,
sum(bootstrap_sample_AintB_ne)/n_validated_AintB_ne)
t_vector <- c(t_vector, t)
}
}
PPV_AintB_ne  <- 0.95
if(n_validated_AintB_ne == 0){
t_vector = c()
for (boot in 1:N_boot) {
bootstrap_sample_A_e <- rbinom(n_validated_A_e, 1, PPV_A_e)
bootstrap_sample_B_e <- rbinom(n_validated_B_e, 1, PPV_B_e)
bootstrap_sample_A_ne <- rbinom(n_validated_A, 1, PPV_A_ne)
bootstrap_sample_B_ne <- rbinom(n_validated_B, 1, PPV_B_ne)
t <- statistic_with_C_empty(P_A_e,
P_B_e,
P_A_ne,
P_B_ne,
sum(bootstrap_sample_A_e)/n_validated_A_e,
sum(bootstrap_sample_B_e)/n_validated_B_e,
sum(bootstrap_sample_A_ne)/n_validated_A_ne,
sum(bootstrap_sample_B_ne)/n_validated_B_ne)
t_vector <- c(t_vector, t)
}
}else{
t_vector = c()
for (boot in 1:N_boot) {
bootstrap_sample_A_e <- rbinom(n_validated_A_e, 1, PPV_A_e)
bootstrap_sample_B_e <- rbinom(n_validated_B_e, 1, PPV_B_e)
bootstrap_sample_AintB_e <- rbinom(n_validated_AintB_e, 1, PPV_AintB_e)
bootstrap_sample_A_ne <- rbinom(n_validated_A, 1, PPV_A_ne)
bootstrap_sample_B_ne <- rbinom(n_validated_B, 1, PPV_B_ne)
bootstrap_sample_AintB_ne <- rbinom(n_validated_AintB_ne, 1, PPV_AintB_ne)
t <- statistic_with_C_sample(P_A_e,
P_B_e,
P_AintB_e,
P_A_ne,
P_B_ne,
P_AintB_ne,
sum(bootstrap_sample_A_e)/n_validated_A_e,
sum(bootstrap_sample_B_e)/n_validated_B_e,
sum(bootstrap_sample_AintB_e)/n_validated_AintB_e,
sum(bootstrap_sample_A_ne)/n_validated_A_ne,
sum(bootstrap_sample_B_ne)/n_validated_B_ne,
sum(bootstrap_sample_AintB_ne)/n_validated_AintB_ne)
t_vector <- c(t_vector, t)
}
}
t_vector
quant_025 = quantile(t_vector, 0.025, na.rm = T)
quant_975 = quantile(t_vector, 0.975, na.rm = T)
quant_025
quant_975
1 - (alpha/2)
alpha
# alpha
alpha <- 0.05
1 - (alpha/2)
alpha/2
quant_025 = quantile(t_vector, 1 - (alpha/2), na.rm = T)
quant_975 = quantile(t_vector, alpha/2, na.rm = T)
quant_025
quant_975
plt <- ggplot(t_vector)+
geom_density()
DF <- data.frame(t = t_vector)
plt <- ggplot(DF, aes(x = t))+
geom_density()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(x=quant_025)
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(quant_025)
DF <- data.frame(t = t_vector,
quant_025 = quant_025,
quant_975 = quant_975)
DF
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(quant_025)
DF <- data.frame(t = t_vector)
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025)
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_075, col = "red")
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = o, col = "grey", linetype = "dashed")+
theme_base()
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
theme_base()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
theme_minimal()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
theme_classic()
plt
p
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
theme_classic()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_classic()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_hc()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density()+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density(fill = "gray50")+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density(col = "gray50", fill = "gray50", alpha = 0.5)+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density(col = "blue", fill = "blue", alpha = 0.5)+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()
plt
plt <- ggplot(DF, aes(x = t))+
geom_density(col = "blue", fill = "blue", alpha = 0.5)+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()+
theme(text = element_text(family = "serif"))
plt
ggsave("NonDiffTest_Stat_Distribution.png",
width = 20,
height = 25,
units = c("cm"),
dpi = 720,)
ggsave("NonDiffTest_Stat_Distribution.png",
width = 25,
height = 20,
units = c("cm"),
dpi = 720,)
plt <- ggplot(DF, aes(x = t))+
geom_density(col = "salmon", fill = "salmon", alpha = 0.5)+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()+
theme(text = element_text(family = "serif"))
plt
plt <- ggplot(DF, aes(x = t))+
geom_density(col = "salmon", fill = "salmon", alpha = 0.5)+
geom_vline(xintercept = quant_025, col = "red")+
geom_vline(xintercept = quant_975, col = "red")+
geom_vline(xintercept = 0, col = "grey6", linetype = "dashed")+
xlab("Test statistic bootstrap distribution")+
labs(title = "Non-Differentiality test")+
theme_bw()+
theme(text = element_text(family = "serif"))
plt
paste0(dirresults, "NonDiffTest_Stat_Distribution.png")
ggsave(paste0(dirresults, "/NonDiffTest_Stat_Distribution.png"),
width = 25,
height = 20,
units = c("cm"),
dpi = 720,)
dirresults
#--------------------------------------
# Non-Differentiality Test: Application
#--------------------------------------
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/09_Test_Application_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
dirresults <- paste0(thisdir, "/09_Test_Application_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
dirresults
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
dirresults
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
ggsave(paste0(dirresults, "/NonDiffTest_Stat_Distribution.png"),
width = 25,
height = 20,
units = c("cm"),
dpi = 720,)
#--------------------------------------
# Non-Differentiality Test: Application
#--------------------------------------
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/09_Test_Application_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-----------
# Parameters
#-----------
# Positive predictive value of A, B and A intersected B in the exposed group
PPV_A_e      <- 0.9
PPV_B_e      <- 0.5
PPV_AintB_e  <- 0.99
# Positive predictive value of A, B and A intersected B in the non-exposed group
PPV_A_ne      <- 0.6
PPV_B_ne      <- 0.4
PPV_AintB_ne  <- 0.95
# Number of cases validate of A, B and A intersected B in the exposed group
n_validated_A_e     <- 100
n_validated_B_e     <- 100
n_validated_AintB_e <- 50
# Number of cases validate of A, B and A intersected B in the non-exposed group
n_validated_A_ne     <- 100
n_validated_B_ne     <- 100
n_validated_AintB_ne <- 50
# Observed prevalence of A, B and A intersected B in the exposed group
P_A_e        <- 0.02
P_B_e        <- 0.04
P_AintB_e    <- 0.002
# Observed prevalence of A, B and A intersected B in the non-exposed group
P_A_ne        <- 0.01
P_B_ne        <- 0.02
P_AintB_ne    <- 0.001
# Number of bootstrap sample
N_boot <- 500
# alpha
alpha <- 0.05
#------------------
# Loading functions
#------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
#-----------------
# Test Application
#-----------------
source(paste0(thisdir,"/04_TestApplication/NonDiffTest.R"))
#--------------------------------------
# Non-Differentiality Test: Application
#--------------------------------------
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/09_Test_Application_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-----------
# Parameters
#-----------
# Positive predictive value of A, B and A intersected B in the exposed group
PPV_A_e      <- 0.9
PPV_B_e      <- 0.5
PPV_AintB_e  <- 0.99
# Positive predictive value of A, B and A intersected B in the non-exposed group
PPV_A_ne      <- 0.6
PPV_B_ne      <- 0.4
PPV_AintB_ne  <- 0.95
# Number of cases validate of A, B and A intersected B in the exposed group
n_validated_A_e     <- 100
n_validated_B_e     <- 100
n_validated_AintB_e <- 50
# Number of cases validate of A, B and A intersected B in the non-exposed group
n_validated_A_ne     <- 100
n_validated_B_ne     <- 100
n_validated_AintB_ne <- 50
# Observed prevalence of A, B and A intersected B in the exposed group
P_A_e        <- 0.02
P_B_e        <- 0.04
P_AintB_e    <- 0.002
# Observed prevalence of A, B and A intersected B in the non-exposed group
P_A_ne        <- 0.01
P_B_ne        <- 0.02
P_AintB_ne    <- 0.001
# Number of bootstrap sample
N_boot <- 500
# alpha
alpha <- 0.05
#------------------
# Loading functions
#------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
#-----------------
# Test Application
#-----------------
source(paste0(thisdir,"/04_TestApplication/NonDiffTest.R"))
quant_025
quant_975
quant_025 < 0
quant_975>0
1 - (alpha/2)
#--------------------------------------
# Non-Differentiality Test: Application
#--------------------------------------
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/09_Test_Application_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-----------
# Parameters
#-----------
# Positive predictive value of A, B and A intersected B in the exposed group
PPV_A_e      <- 0.9
PPV_B_e      <- 0.5
PPV_AintB_e  <- 0.99
# Positive predictive value of A, B and A intersected B in the non-exposed group
PPV_A_ne      <- 0.6
PPV_B_ne      <- 0.4
PPV_AintB_ne  <- 0.95
# Number of cases validate of A, B and A intersected B in the exposed group
n_validated_A_e     <- 100
n_validated_B_e     <- 100
n_validated_AintB_e <- 50
# Number of cases validate of A, B and A intersected B in the non-exposed group
n_validated_A_ne     <- 100
n_validated_B_ne     <- 100
n_validated_AintB_ne <- 50
# Observed prevalence of A, B and A intersected B in the exposed group
P_A_e        <- 0.02
P_B_e        <- 0.04
P_AintB_e    <- 0.002
# Observed prevalence of A, B and A intersected B in the non-exposed group
P_A_ne        <- 0.01
P_B_ne        <- 0.02
P_AintB_ne    <- 0.001
# Number of bootstrap sample
N_boot <- 500
# alpha
alpha <- 0.05
#------------------
# Loading functions
#------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
#-----------------
# Test Application
#-----------------
source(paste0(thisdir,"/04_TestApplication/NonDiffTest.R"))
source("~/Documents/GitHub_Repo/NonDifferentialityTest/Rscript/to_run_non_diff_test.R", echo=TRUE)
write.csv(data, file = paste0(dirresults, "/t_distribution.csv"))
write.csv(t_vector, file = paste0(dirresults, "/t_distribution.csv"))
write.csv(t_vector, file = paste0(dirresults, "/t_distribution.csv"), row.names = FALSE)
params <- data.frame(PPV_A_e = PPV_A_e,
PPV_B_e = PPV_B_e,
PPV_AintB_e = PPV_AintB_e,
PPV_A_ne = PPV_A_ne,
PPV_B_ne = PPV_B_ne,
PPV_AintB_ne = PPV_AintB_ne,
n_validated_A_e = n_validated_A_e,
n_validated_B_e = n_validated_B_e,
n_validated_AintB_e = n_validated_AintB_e,
n_validated_A_ne = n_validated_A_ne,
n_validated_B_ne = n_validated_B_ne,
n_validated_AintB_ne = n_validated_AintB_ne,
P_A_e = P_A_e,
P_B_e = P_B_e,
P_AintB_e = P_AintB_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_AintB_ne = P_AintB_ne,
N_boot = N_boot,
alpha = alpha)
write.csv(params, file = paste0(dirresults, "/Parameters.csv"), row.names = FALSE)
