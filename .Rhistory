mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
#ggsave(paste0(thisdir, "/09_Figures/RR_scenario1.png"))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
#ggsave(paste0(thisdir, "/09_Figures/RR_scenario1.png"))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
P_A_e = data[A==1&E==1, .N]/data[E==1, .N]
P_A_ne = data[A==1&E==0, .N]/data[E==0, .N]
P_B_e = data[B==1&E==1, .N]/data[E==1, .N]
P_B_ne = data[B==1&E==0, .N]/data[E==0, .N]
P_C_e = data[C==1&E==1, .N]/data[E==1, .N]
P_C_ne = data[C==1&E==0, .N]/data[E==0, .N]
P_A =  data[A==1, .N]/N
P_B = data[B==1, .N]/N
P_C = data[C==1, .N]/N
DT_A <- data[A==1]
DT_B <- data[B==1]
DT_C <- data[C==1]
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = PPV_C_e = PPV_C_ne = NULL
n1=n2=n3=n4=NULL
tx_boot=c()
RR_est=c( )
RR_single_indicator=c( )
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=PPV_C_e0=PPV_C_ne0=c()
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=PPV_C_e2=PPV_C_ne2=c()
for(i in 1:nsam){
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
sam_Yc1 = DT_C[sample(nrow(DT_C),nc),]
PPV_A_e0 = c(PPV_A_e0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==1))/
(sum(sam_Ya1$A==1&sam_Ya1$E==1)))
PPV_B_e0 = c(PPV_B_e0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==1))/
(sum(sam_Yb1$B==1&sam_Yb1$E==1)))
PPV_C_e0 = c(PPV_C_e0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==1))/
(sum(sam_Yc1$C==1&sam_Yc1$E==1)))
PPV_A_ne0 = c(PPV_A_ne0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==0))/
(sum(sam_Ya1$A==1&sam_Ya1$E==0)))
PPV_B_ne0 = c(PPV_B_ne0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==0))/
(sum(sam_Yb1$B==1&sam_Yb1$E==0)))
PPV_C_ne0 = c(PPV_C_ne0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==0))/
(sum(sam_Yc1$C==1&sam_Yc1$E==0)))
RR_est = c(RR_est, RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i]))
RR_single_indicator = c( RR_single_indicator, (P_A_e/P_A_ne) * (PPV_A_e0[i]/PPV_A_ne0[i]))
}
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
sam_Yc1 = DT_C[sample(nrow(DT_C),nc),]
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
test_power # 1
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario2.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
#######################
### RR distribution ###
#######################
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
#ggsave(paste0(thisdir, "/09_Figures/RR_scenario1.png"))
################################
### Non Differentiality test ###
################################
### Bootstrap single test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
test_power
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
test_power
# 0.054
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
test_power
# 0.054
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
test_power
0.95*55+0.05*140
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k))
### setting parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtk_2.R"))
### Loading data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### Test
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
power = rej_95,
sample_size = z,
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, rej_95)
end.time <- Sys.time()
time.taken <- c(time.taken, (end.time - start.time))
counter <- counter + 1
print(paste0(counter, "/" , len))
}
}
}
}
}
fwrite(DT_comb, paste0(thisdir, "/05_Results/DT_comb_sample_250_with_C_sample.csv"))
Result <- data.table(Power = TestPower, combination = combination)
fwrite(Result, paste0(thisdir, "/05_Results/C_sample.csv"))
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Loading test statistic
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
################################################################################
###################                Simulation                ###################
################################################################################
prop_exp_list    <- c(0.2)
pi_ne_list       <- c(0.05)
risk_list        <- c(2)
SE_exposed_list  <- c(0.15, 0.30, 0.40, 0.50, 0.60, 0.70, 0.85)
sample_size_list <- c(250)
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(SE_exposed_list)*
length(sample_size_list)
TestPower <- c()
combination <- c()
time.taken <- c()
DT_comb <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
SE_exp = integer(0),
power = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in SE_exposed_list) {
for (z in sample_size_list) {
start.time <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k))
### setting parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtk_2.R"))
### Loading data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### Test
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
power = rej_95,
sample_size = z,
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, rej_95)
end.time <- Sys.time()
time.taken <- c(time.taken, (end.time - start.time))
counter <- counter + 1
print(paste0(counter, "/" , len))
}
}
}
}
}
fwrite(DT_comb, paste0(thisdir, "/05_Results/DT_comb_sample_250_with_C_sample.csv"))
Result <- data.table(Power = TestPower, combination = combination)
fwrite(Result, paste0(thisdir, "/05_Results/C_sample.csv"))
View(DT_comb)
Result
plot <- ggplot(Result, aes(x=se_e, y=Power))+ #, label=label
geom_point()+
geom_line(size=1)+
theme_hc()+
ylab("")+
#scale_color_manual(values = c("deeppink", "skyblue3", "yellow3"))+
scale_x_continuous( breaks=se_e, labels=se_e)+
geom_vline(xintercept = 0.4, lty= 2, col = "slategrey")+
geom_vline(xintercept = 0.6, lty= 2, col = "slategrey")
library(ggplot2)
library(ggthemes)
plot <- ggplot(Result, aes(x=se_e, y=Power))+ #, label=label
geom_point()+
geom_line(size=1)+
theme_hc()+
ylab("")+
#scale_color_manual(values = c("deeppink", "skyblue3", "yellow3"))+
scale_x_continuous( breaks=se_e, labels=se_e)+
geom_vline(xintercept = 0.4, lty= 2, col = "slategrey")+
geom_vline(xintercept = 0.6, lty= 2, col = "slategrey")
Result[, se_e := c(0.15, 0.30, 0.40, 0.50, 0.60, 0.70, 0.85)]
library(data.table)
Result <- as.data.table(Result)
Result[, se_e := c(0.15, 0.30, 0.40, 0.50, 0.60, 0.70, 0.85)]
plot <- ggplot(Result, aes(x=se_e, y=Power))+ #, label=label
geom_point()+
geom_line(size=1)+
theme_hc()+
ylab("")+
#scale_color_manual(values = c("deeppink", "skyblue3", "yellow3"))+
scale_x_continuous( breaks=se_e, labels=se_e)+
geom_vline(xintercept = 0.4, lty= 2, col = "slategrey")+
geom_vline(xintercept = 0.6, lty= 2, col = "slategrey")
Result
plot <- ggplot(Result, aes(x=se_e, y=Power))+ #, label=label
geom_point()+
geom_line(size=1)+
theme_hc()+
ylab("")+
#scale_color_manual(values = c("deeppink", "skyblue3", "yellow3"))+
scale_x_continuous( breaks=se_e, labels=se_e)+
geom_vline(xintercept = 0.4, lty= 2, col = "slategrey")+
geom_vline(xintercept = 0.6, lty= 2, col = "slategrey")
Result
plot <- ggplot(Result, aes(x=se_e, y=Power))+ #, label=label
geom_point()+
geom_line(size=1)+
theme_hc()+
ylab("")+
#scale_color_manual(values = c("deeppink", "skyblue3", "yellow3"))+
#scale_x_continuous( breaks=se_e, labels=se_e)+
geom_vline(xintercept = 0.4, lty= 2, col = "slategrey")+
geom_vline(xintercept = 0.6, lty= 2, col = "slategrey")
plot
