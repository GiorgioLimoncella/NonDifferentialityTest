mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
thisdir
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rstudioapi::getSourceEditorContext()$path
rstudioapi::getSourceEditorContext()$path
rstudioapi::getSourceEditorContext()
dirname(rstudioapi::getSourceEditorContext()$path)
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
View(data)
data[Y==1 & A==1 & E==1, .N]
SE_posteriori_AE <- data[Y==1 & A==1 & E==1, .N]/data[Y==1 & E==1, .N]
SE_posteriori_AE
SE_posteriori_AE  <- data[Y==1 & A==1 & E==1, .N]/data[Y==1 & E==1, .N]
SE_posteriori_ANE <- data[Y==1 & A==1 & E==0, .N]/data[Y==1 & E==0, .N]
SE_posteriori_ANE
PPV_posteriori_A <- data[Y==1 & A==1 & E==1, .N]/data[Y==1 & A==0 & E==1, .N]
PPV_posteriori_A
PPV_posteriori_A <- data[Y==1 & A==1 & E==1, .N]/data[ A==1 & E==1, .N]
PPV_posteriori_A
PPV_posteriori_AE  <- data[Y==1 & A==1 & E==1, .N]/data[ A==1 & E==1, .N]
PPV_posteriori_ANE <- data[Y==1 & A==1 & E==0, .N]/data[ A==1 & E==0, .N]
PPV_posteriori_BE  <- data[Y==1 & B==1 & E==1, .N]/data[ B==1 & E==1, .N]
PPV_posteriori_BNE <- data[Y==1 & B==1 & E==1, .N]/data[ B==1 & E==1, .N]
PPV_posteriori_BE
PPV_posteriori_AE
Prev_osservata_AE <- data[A==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_BE <- data[B==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_AE
Prev_osservata_BE <- data[B==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_BE
Prev_osservata_AE  <- data[A==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_ANE <- data[A==1 & E==0, .N]/data[E==0, .N]
Prev_osservata_BE  <- data[B==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_BNE <- data[B==1 & E==0, .N]/data[E==0, .N]
Prev_osservata_AE  <- data[A==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_ANE <- data[A==1 & E==0, .N]/data[E==0, .N]
Prev_osservata_BE  <- data[B==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_BNE <- data[B==1 & E==0, .N]/data[E==0, .N]
Prev_osservata_CE  <- data[C==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_CNE <- data[C==1 & E==0, .N]/data[E==0, .N]
Prev_osservata_BE  <- data[B==1 & E==1, .N]/data[E==1, .N]
Prev_osservata_BNE <- data[B==1 & E==0, .N]/data[E==0, .N]
SE_posteriori_AE  <- data[Y==1 & A==1 & E==1, .N]/data[Y==1 & E==1, .N]
SE_posteriori_ANE <- data[Y==1 & A==1 & E==0, .N]/data[Y==1 & E==0, .N]
SE_posteriori_BE  <- data[Y==1 & B==1 & E==1, .N]/data[Y==1 & E==1, .N]
SE_posteriori_BNE <- data[Y==1 & B==1 & E==0, .N]/data[Y==1 & E==0, .N]
PPV_posteriori_AE  <- data[Y==1 & A==1 & E==1, .N]/data[ A==1 & E==1, .N]
PPV_posteriori_ANE <- data[Y==1 & A==1 & E==0, .N]/data[ A==1 & E==0, .N]
PPV_posteriori_BE  <- data[Y==1 & B==1 & E==1, .N]/data[ B==1 & E==1, .N]
PPV_posteriori_BNE <- data[Y==1 & B==1 & E==1, .N]/data[ B==1 & E==1, .N]
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*max(PPV_posteriori_AE, PPV_posteriori_BE)) /
(Prev_osservata_ANE*PPV_posteriori_ANE + P_BPrev_osservata_BNE_ne*PPV_posteriori_BNE - Prev_osservata_CNE*max(PPV_posteriori_ANE, PPV_posteriori_BNE))
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*max(PPV_posteriori_AE, PPV_posteriori_BE)) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE_ne*PPV_posteriori_BNE - Prev_osservata_CNE*max(PPV_posteriori_ANE, PPV_posteriori_BNE))
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*max(PPV_posteriori_AE, PPV_posteriori_BE)) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE*PPV_posteriori_BNE - Prev_osservata_CNE*max(PPV_posteriori_ANE, PPV_posteriori_BNE))
RR_posteriori
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*PPV_posteriori_CE) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE*PPV_posteriori_BNE - Prev_osservata_CNE*PPV_posteriori_CNE)
PPV_posteriori_CE  <- data[Y==1 & C==1 & E==1, .N]/data[ C==1 & E==1, .N]
PPV_posteriori_CNE <- data[Y==1 & C==1 & E==1, .N]/data[ C==1 & E==1, .N]
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*max(PPV_posteriori_AE, PPV_posteriori_BE)) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE*PPV_posteriori_BNE - Prev_osservata_CNE*max(PPV_posteriori_ANE, PPV_posteriori_BNE))
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*PPV_posteriori_CE) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE*PPV_posteriori_BNE - Prev_osservata_CNE*PPV_posteriori_CNE)
RR_posteriori
RR_posteriori <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*max(PPV_posteriori_AE, PPV_posteriori_BE)) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE*PPV_posteriori_BNE - Prev_osservata_CNE*max(PPV_posteriori_ANE, PPV_posteriori_BNE))
RR_posteriori
Prev_osservata_AE*PPV_posteriori_AE
Prev_osservata_BE*PPV_posteriori_BE
Prev_osservata_CE*max(PPV_posteriori_AE, PPV_posteriori_BE)
Prev_osservata_CE  * max(PPV_posteriori_AE,  PPV_posteriori_BE)
0.059975 + 0.077975 -  0.04210641
(Prev_osservata_AE  * PPV_posteriori_AE  + Prev_osservata_BE  * PPV_posteriori_BE  - Prev_osservata_CE  * max(PPV_posteriori_AE,  PPV_posteriori_BE))
(Prev_osservata_ANE * PPV_posteriori_ANE + Prev_osservata_BNE * PPV_posteriori_BNE - Prev_osservata_CNE * max(PPV_posteriori_ANE, PPV_posteriori_BNE))
SE_posteriori_CE  <- data[Y==1 & C==1 & E==1, .N]/data[Y==1 & E==1, .N]
SE_posteriori_CNE <- data[Y==1 & C==1 & E==0, .N]/data[Y==1 & E==0, .N]
SE_posteriori_AE + SE_posteriori_BE - SE_posteriori_CE
RR_posteriori <- (data[Y==1 & E==1, .N]/data[ E==1, .N]) /  (data[Y==1 & E==0, .N]/data[ E==0, .N])
RR_posteriori
Prev_osservata_AE * PPV_posteriori_AE / RR_posteriori
(Prev_osservata_AE * PPV_posteriori_AE / RR_posteriori) + (Prev_osservata_BE * PPV_posteriori_BE / RR_posteriori) - (Prev_osservata_CE * PPV_posteriori_CE / RR_posteriori)
(Prev_osservata_AE * PPV_posteriori_AE / RR_posteriori)
Prev_osservata_AE
PPV_posteriori_AE
Prev_osservata_AE * PPV_posteriori_AE
(Prev_osservata_AE * PPV_posteriori_AE / RR_posteriori)
(Prev_osservata_AE * PPV_posteriori_AE / SE_posteriori_AE)
PPV_posteriori_AE / SE_posteriori_AE
Prev_osservata_AE
(Prev_osservata_AE * PPV_posteriori_AE / SE_posteriori_AE)
(Prev_osservata_AE * PPV_posteriori_AE / SE_posteriori_AE)
(Prev_osservata_AE * PPV_posteriori_AE / RR_posteriori) + (Prev_osservata_BE * PPV_posteriori_BE / RR_posteriori) - (Prev_osservata_CE * PPV_posteriori_CE / RR_posteriori)
PI_E_posteriori <- (data[Y==1 & E==1, .N]/data[ E==1, .N])
PI_E_posteriori
PI_NE_posteriori <- (data[Y==1 & E==0, .N]/data[ E==0, .N])
PI_NE_posteriori
RR_posteriori <- (data[Y==1 & E==1, .N]/data[ E==1, .N]) /  (data[Y==1 & E==0, .N]/data[ E==0, .N])
RR_posteriori
SE_posteriori_AE + SE_posteriori_BE - SE_posteriori_CE
SE_AUB_formula <- (Prev_osservata_AE * PPV_posteriori_AE / PI_E) + (Prev_osservata_BE * PPV_posteriori_BE / PI_E) - (Prev_osservata_CE * PPV_posteriori_CE / PI_E)
SE_AUB_formula <- (Prev_osservata_AE * PPV_posteriori_AE / PI_E_posteriori) + (Prev_osservata_BE * PPV_posteriori_BE / PI_E_posteriori) - (Prev_osservata_CE * PPV_posteriori_CE / PI_E_posteriori)
SE_AUB_formula
(Prev_osservata_AE * PPV_posteriori_AE / PI_E_posteriori)
(Prev_osservata_BE * PPV_posteriori_BE / PI_E_posteriori)
SE_AUB_formula <- (Prev_osservata_AE * PPV_posteriori_AE / PI_E_posteriori) + (Prev_osservata_BE * PPV_posteriori_BE / PI_E_posteriori) - (Prev_osservata_CE * PPV_posteriori_CE / PI_E_posteriori)
SE_AUB_formula
SE_AUB_formula
R_formula <- (Prev_osservata_AE * PPV_posteriori_AE / SE_AUB_formula) + (Prev_osservata_BE * PPV_posteriori_BE / SE_AUB_formula) - (Prev_osservata_CE * PPV_posteriori_CE / SE_AUB_formula)
R_formula
R_formula_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / SE_AUB_formula) + (Prev_osservata_BNE * PPV_posteriori_BNE / SE_AUB_formula) - (Prev_osservata_CNE * PPV_posteriori_CNE / SE_AUB_formula)
R_formula_NE
R_formula <- (Prev_osservata_AE * PPV_posteriori_AE / SE_AUB_formula) + (Prev_osservata_BE * PPV_posteriori_BE / SE_AUB_formula) - (Prev_osservata_CE * PPV_posteriori_CE / SE_AUB_formula)
R_formula
R_formula_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / SE_AUB_formula) + (Prev_osservata_BNE * PPV_posteriori_BNE / SE_AUB_formula) - (Prev_osservata_CNE * PPV_posteriori_CNE / SE_AUB_formula)
R_formula <- (Prev_osservata_AE * PPV_posteriori_AE / SE_AUB_formula) + (Prev_osservata_BE * PPV_posteriori_BE / SE_AUB_formula) - (Prev_osservata_CE * PPV_posteriori_CE / SE_AUB_formula)
R_formula
SE_AUB_formula
R_formula_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / SE_AUB_formula) + (Prev_osservata_BNE * PPV_posteriori_BNE / SE_AUB_formula) - (Prev_osservata_CNE * PPV_posteriori_CNE / SE_AUB_formula)
R_formula_NE
PI_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / SE_posteriori_ANE)
PI_NE
PI_NE_posteriori
SE_AUB_formula_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / PI_NE_posteriori) + (Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori) - (Prev_osservata_CNE * PPV_posteriori_CNE / PI_NE_posteriori)
SE_AUB_formula_NE
PI_E_posteriori
PI_NE_posteriori
(Prev_osservata_AE * PPV_posteriori_AE / PI_E_posteriori)
(Prev_osservata_ANE * PPV_posteriori_ANE / PI_NE_posteriori)
(Prev_osservata_BE * PPV_posteriori_BE / PI_E_posteriori)
(Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori)
Prev_osservata_BNE
Prev_osservata_BE
PPV_posteriori_BE
PPV_posteriori_BNE
(Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori)
data[B==1 & E==0, .N]
data[E==0, .N]
Prev_osservata_BNE <- data[B==1 & E==0, .N]/data[E==0, .N]
Prev_osservata_BNE
(Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori)
Prev_osservata_BNE
Prev_osservata_BNE * PPV_posteriori_BNE
PI_NE_posteriori
PPV_posteriori_BNE / PI_NE_posteriori
Prev_osservata_BNE
Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori
SE_AUB_formula_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / PI_NE_posteriori) + (Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori) - (Prev_osservata_CNE * PPV_posteriori_CNE / PI_NE_posteriori)
SE_AUB_formula_NE
SE_AUB_formula <- (Prev_osservata_AE * PPV_posteriori_AE / PI_E_posteriori) + (Prev_osservata_BE * PPV_posteriori_BE / PI_E_posteriori) - (Prev_osservata_CE * PPV_posteriori_CE / PI_E_posteriori)
SE_AUB_formula
Prev_osservata_BNE <- data[B==1 & E==0, .N]/data[E==0, .N]
PPV_posteriori_BNE <- data[Y==1 & B==1 & E==0, .N]/data[ B==1 & E==0, .N]
PI_NE_posteriori   <- data[Y==1 & E==0, .N]/data[ E==0, .N]
SE_B_non_exp <- Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori
SE_AUB_formula_NE <- (Prev_osservata_ANE * PPV_posteriori_ANE / PI_NE_posteriori) + (Prev_osservata_BNE * PPV_posteriori_BNE / PI_NE_posteriori) - (Prev_osservata_CNE * PPV_posteriori_CNE / PI_NE_posteriori)
SE_AUB_formula_NE
RR_posteriori_stimato_max <- (Prev_osservata_AE  * PPV_posteriori_AE  + Prev_osservata_BE  * PPV_posteriori_BE  - Prev_osservata_CE  * max(PPV_posteriori_AE,  PPV_posteriori_BE)) /
(Prev_osservata_ANE * PPV_posteriori_ANE + Prev_osservata_BNE * PPV_posteriori_BNE - Prev_osservata_CNE * max(PPV_posteriori_ANE, PPV_posteriori_BNE))
RR_posteriori_stimato <- (Prev_osservata_AE*PPV_posteriori_AE + Prev_osservata_BE*PPV_posteriori_BE - Prev_osservata_CE*PPV_posteriori_CE) /
(Prev_osservata_ANE*PPV_posteriori_ANE + Prev_osservata_BNE*PPV_posteriori_BNE - Prev_osservata_CNE*PPV_posteriori_CNE)
RR_posteriori_stimato
RR_posteriori_stimato_max
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
P_A_e = data[A==1&E==1, .N]/data[E==1, .N]
P_A_ne = data[A==1&E==0, .N]/data[E==0, .N]
P_B_e = data[B==1&E==1, .N]/data[E==1, .N]
P_B_ne = data[B==1&E==0, .N]/data[E==0, .N]
P_C_e = data[C==1&E==1, .N]/data[E==1, .N]
P_C_ne = data[C==1&E==0, .N]/data[E==0, .N]
P_A =  data[A==1, .N]/N
P_B = data[B==1, .N]/N
P_C = data[C==1, .N]/N
DT_A <- data[A==1]
DT_B <- data[B==1]
DT_C <- data[C==1]
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = PPV_C_e = PPV_C_ne = NULL
n1=n2=n3=n4=NULL
tx_boot=c()
RR_est=c( )
RR_single_indicator=c( )
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=PPV_C_e0=PPV_C_ne0=c()
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=PPV_C_e2=PPV_C_ne2=c()
for(i in 1:nsam){
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
sam_Yc1 = DT_C[sample(nrow(DT_C),nc),]
PPV_A_e0 = c(PPV_A_e0,
(sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/
(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_e0 = c(PPV_B_e0,
(sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/
(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_C_e0 = c(PPV_C_e0,
(sum(sam_Yc_boot$C==1&sam_Yc_boot$Y==1&sam_Yc_boot$E==1))/
(sum(sam_Yc_boot$C==1&sam_Yc_boot$E==1)))
PPV_A_ne0 = c(PPV_A_ne0,
(sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/
(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
PPV_B_ne0 = c(PPV_B_ne0,
(sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/
(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_C_ne0 = c(PPV_C_ne0,
(sum(sam_Yc_boot$C==1&sam_Yc_boot$Y==1&sam_Yc_boot$E==0))/
(sum(sam_Yc_boot$C==1&sam_Yc_boot$E==0)))
RR_est = c(RR_est, RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i]))
RR_single_indicator = c( RR_single_indicator, (P_A_e/P_A_ne) * (PPV_A_e0[i]/PPV_A_ne0[i]))
}
for(i in 1:nsam){
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
sam_Yc1 = DT_C[sample(nrow(DT_C),nc),]
PPV_A_e0 = c(PPV_A_e0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==1))/
(sum(sam_Ya1$A==1&sam_Ya1$E==1)))
PPV_B_e0 = c(PPV_B_e0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==1))/
(sum(sam_Yb1$B==1&sam_Yb1$E==1)))
PPV_C_e0 = c(PPV_C_e0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==1))/
(sum(sam_Yc1$C==1&sam_Yc1$E==1)))
PPV_A_ne0 = c(PPV_A_ne0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==0))/
(sum(sam_Ya1$A==1&sam_Ya1$E==0)))
PPV_B_ne0 = c(PPV_B_ne0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==0))/
(sum(sam_Yb1$B==1&sam_Yb1$E==0)))
PPV_C_ne0 = c(PPV_C_ne0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==0))/
(sum(sam_Yc1$C==1&sam_Yc1$E==0)))
RR_est = c(RR_est, RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i]))
RR_single_indicator = c( RR_single_indicator, (P_A_e/P_A_ne) * (PPV_A_e0[i]/PPV_A_ne0[i]))
}
source("C:/Users/giorg/Seafile/Mia Libreria/GitHub_Repo/NonDifferentialityTest/Rscript/02_TestFunctions/RiskRatio_estimator.R")
source("C:/Users/giorg/Seafile/Mia Libreria/GitHub_Repo/NonDifferentialityTest/Rscript/02_TestFunctions/RiskRatio_estimator.R")
for(i in 1:nsam){
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
sam_Yc1 = DT_C[sample(nrow(DT_C),nc),]
PPV_A_e0 = c(PPV_A_e0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==1))/
(sum(sam_Ya1$A==1&sam_Ya1$E==1)))
PPV_B_e0 = c(PPV_B_e0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==1))/
(sum(sam_Yb1$B==1&sam_Yb1$E==1)))
PPV_C_e0 = c(PPV_C_e0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==1))/
(sum(sam_Yc1$C==1&sam_Yc1$E==1)))
PPV_A_ne0 = c(PPV_A_ne0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==0))/
(sum(sam_Ya1$A==1&sam_Ya1$E==0)))
PPV_B_ne0 = c(PPV_B_ne0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==0))/
(sum(sam_Yb1$B==1&sam_Yb1$E==0)))
PPV_C_ne0 = c(PPV_C_ne0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==0))/
(sum(sam_Yc1$C==1&sam_Yc1$E==0)))
RR_est = c(RR_est, RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i]))
RR_single_indicator = c( RR_single_indicator, (P_A_e/P_A_ne) * (PPV_A_e0[i]/PPV_A_ne0[i]))
}
RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i])
RiskRatio_est_with_C_sample <- function(P_A_e,
P_B_e,
P_C_e,
P_A_ne,
P_B_ne,
P_C_ne,
PPV_A_e,
PPV_B_e,
PPV_C_e,
PPV_A_ne,
PPV_B_ne,
PPV_C_ne){
RR <- (P_A_e*PPV_A_e + P_B_e*PPV_B_e - P_C_e*PPV_C_e) /
(P_A_ne*PPV_A_ne + P_B_ne*PPV_B_ne - P_C_nePPV_C_ne)
return(RR)
}
RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i])
source("C:/Users/giorg/Seafile/Mia Libreria/GitHub_Repo/NonDifferentialityTest/Rscript/02_TestFunctions/RiskRatio_estimator.R")
for(i in 1:nsam){
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
sam_Yc1 = DT_C[sample(nrow(DT_C),nc),]
PPV_A_e0 = c(PPV_A_e0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==1))/
(sum(sam_Ya1$A==1&sam_Ya1$E==1)))
PPV_B_e0 = c(PPV_B_e0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==1))/
(sum(sam_Yb1$B==1&sam_Yb1$E==1)))
PPV_C_e0 = c(PPV_C_e0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==1))/
(sum(sam_Yc1$C==1&sam_Yc1$E==1)))
PPV_A_ne0 = c(PPV_A_ne0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==0))/
(sum(sam_Ya1$A==1&sam_Ya1$E==0)))
PPV_B_ne0 = c(PPV_B_ne0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==0))/
(sum(sam_Yb1$B==1&sam_Yb1$E==0)))
PPV_C_ne0 = c(PPV_C_ne0,
(sum(sam_Yc1$C==1&sam_Yc1$Y==1&sam_Yc1$E==0))/
(sum(sam_Yc1$C==1&sam_Yc1$E==0)))
RR_est = c(RR_est, RiskRatio_est_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_C_e =  PPV_C_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i],
PPV_C_ne =  PPV_C_ne0[i]))
RR_single_indicator = c( RR_single_indicator, (P_A_e/P_A_ne) * (PPV_A_e0[i]/PPV_A_ne0[i]))
}
DT_RR_est <- data.table(RR_estimate = RR_est)
plt_RR <- ggplot(DT_RR_est, aes(RR_estimate))+
geom_density(col="grey", fill="grey", alpha = 0.5)+
#scale_x_continuous(breaks = c(-0.5, 0, 0.5), limits = c(-0.2,1))+
geom_vline(xintercept = mean(RR_est), col="black")+
geom_vline(xintercept = risk, col="salmon")+
labs(x="Risk Ratio estimate", y="")+
theme_minimal()
DT_RR_single_indicator_est <- data.table(RR_estimate = RR_single_indicator)
plt_RR_single_indicator <- ggplot(DT_RR_single_indicator_est, aes(RR_estimate))+
geom_density(col="grey", fill="grey", alpha = 0.5)+
#scale_x_continuous(breaks = c(-0.5, 0, 0.5), limits = c(-0.2,1))+
geom_vline(xintercept = mean(RR_single_indicator), col="black")+
geom_vline(xintercept = risk, col="salmon")+
labs(x="Risk Ratio estimate", y="")+
theme_minimal()
plt_RR_single_indicator
plt_RR
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R.R"))
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample.R"))
test_power
