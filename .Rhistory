### validation indices: E=0 & Y=1
SE_A_ne          <- 0.5
k * SE_A_ne
### validation indices: E=1 & Y=1
SE_A_e           <- k * SE_A_ne
View(DT_comb)
library(readr)
DT_combinations <- read_csv("Rscript/05_Results/2022-9-27_17-1/DT_combinations.csv")
View(DT_combinations)
library(shiny); runApp('Rscript/08_dashboard/app_v4.R')
View(DT_combinations)
runApp('Rscript/08_dashboard/app_v4.R')
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
library(ggthemes)
library(plotly)
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
last_results <- "/../05_Results/2022-9-27_17-1/DT_combinations.csv"
DT <- fread(paste0(thisdir, last_results))
#DT_final <- fread(paste0(thisdir, "/../05_Results/2022-9-5_12-38/DT_final.csv"))
runApp('app_v4.R')
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
library(ggthemes)
library(plotly)
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
last_results <- "/../05_Results/2022-9-30_13-5/DT_combinations.csv"
DT <- fread(paste0(thisdir, last_results))
#DT_final <- fread(paste0(thisdir, "/../05_Results/2022-9-5_12-38/DT_final.csv"))
View(DT)
unique(DT[, prop_exp]
)
unique(DT[, risk])
unique(DT[, SE_B_given_A])
unique(DT[, SE_B_given_A_e])
runApp('app_v4.R')
library(shiny); runApp('Rscript/08_dashboard/app_v5.R')
install.packages("shinythemes")
runApp('Rscript/08_dashboard/app_v5.R')
#--------------------------------------
# Non-Differentiality Test: HPC- script
#--------------------------------------
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#---------------------------
# Loading program parameters
#---------------------------
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
#--------------------
# Setting the cluster
#--------------------
n_of_core_to_be_used <- 10
setDTthreads(n_of_core_to_be_used)
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/05_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-------------------------------------
# Loading test statistic & RR formulas
#-------------------------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
#-------------------------
# Defining data parameters
#-------------------------
prop_exp_list    <- c(0.2) #c(0.05, 0.2, 0.5)
pi_ne_list       <- c(0.01, 0.1)
risk_list        <- c(1.2, 2)
sensitivity_list <-  list(#list( e = 0.2858, ne = 0.7142),       # 0.4
#list( e = 0.375,  ne = 0.625),         # 0.6
list( e = 0.4445, ne = 0.5555),       # 0.8
list( e = 0.5,    ne = 0.5),             # 1
list( e = 0.545,  ne = 0.454))#,         # 1.2
#list( e = 0.5833, ne = 0.4166),       # 1.4
#list( e = 0.6155, ne = 0.3845))       # 1.6
P_B_given_A_list <- c(0.9)#c(0.15, 0.3, 0.5)
sample_size_list <-  list(#list( a = 100, b = 100, c = 50),
list( a = 200, b = 200, c = 100))#,
#list( a = 300, b = 300, c = 150))
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(sensitivity_list)*
length(sample_size_list)*
length(P_B_given_A_list)
TestPower <- c()
combination <- c()
DT_comb <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
SE_ratio = integer(0),
power = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
#-------------------
# Running simulation
#-------------------
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in sensitivity_list) {
for (z in sample_size_list) {
for (s in P_B_given_A_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k$e, "_", k$ne, "_", z$a, "_", z$b, "_", z$c))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability_sample_strata_exp.R"))
#---------------------
# Computing test power
#---------------------
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#----------------------------------
# Computing PPV and RR distribution
#----------------------------------
source(paste0(thisdir,"/06_PPV/PPV_RR_distribution_parlapply.R"))
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_ratio = round(k$e / k$ne, digits = 2),
power = power_of_test,
sample_size = paste0(z$a, "_", z$b, "_", z$c),
SE_AUB = SE_AUB,
SE_A_e = k$e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = k$ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, power_of_test)
counter <- counter + 1
fwrite(DT_PPV_RR, paste0(dirresults,
"/DT_PPV_RR_",
combination[counter],
".csv"))
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat("Iteration:    Power        (time elapsed)    \n")
cat(paste0(counter, "/", len), ":  ", power_of_test, " (")
cat(time_iteration, ") \n")
if(counter %% 10 == 0){
Result <- data.table(Power = TestPower, combination = combination)
fwrite(Result, paste0(dirresults, "/Results.csv"))
}
#stop("stoppete")
}
}
}
}
}
}
#--------------------------------------
# Non-Differentiality Test: HPC- script
#--------------------------------------
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#---------------------------
# Loading program parameters
#---------------------------
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
#--------------------
# Setting the cluster
#--------------------
n_of_core_to_be_used <- 6
setDTthreads(n_of_core_to_be_used)
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/05_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-------------------------------------
# Loading test statistic & RR formulas
#-------------------------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
#-------------------------
# Defining data parameters
#-------------------------
prop_exp_list    <- c(0.2) #c(0.05, 0.2, 0.5)
pi_ne_list       <- c(0.01, 0.1)
risk_list        <- c(1.2, 2)
sensitivity_list <-  list(#list( e = 0.2858, ne = 0.7142),       # 0.4
#list( e = 0.375,  ne = 0.625),         # 0.6
list( e = 0.4445, ne = 0.5555),       # 0.8
list( e = 0.5,    ne = 0.5),             # 1
list( e = 0.545,  ne = 0.454))#,         # 1.2
#list( e = 0.5833, ne = 0.4166),       # 1.4
#list( e = 0.6155, ne = 0.3845))       # 1.6
P_B_given_A_list <- c(0.9)#c(0.15, 0.3, 0.5)
sample_size_list <-  list(#list( a = 100, b = 100, c = 50),
list( a = 200, b = 200, c = 100))#,
#list( a = 300, b = 300, c = 150))
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(sensitivity_list)*
length(sample_size_list)*
length(P_B_given_A_list)
TestPower <- c()
combination <- c()
DT_comb <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
SE_ratio = integer(0),
power = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
#-------------------
# Running simulation
#-------------------
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in sensitivity_list) {
for (z in sample_size_list) {
for (s in P_B_given_A_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k$e, "_", k$ne, "_", z$a, "_", z$b, "_", z$c))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability_sample_strata_exp.R"))
#---------------------
# Computing test power
#---------------------
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#----------------------------------
# Computing PPV and RR distribution
#----------------------------------
source(paste0(thisdir,"/06_PPV/PPV_RR_distribution_parlapply.R"))
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_ratio = round(k$e / k$ne, digits = 2),
power = power_of_test,
sample_size = paste0(z$a, "_", z$b, "_", z$c),
SE_AUB = SE_AUB,
SE_A_e = k$e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = k$ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, power_of_test)
counter <- counter + 1
fwrite(DT_PPV_RR, paste0(dirresults,
"/DT_PPV_RR_",
combination[counter],
".csv"))
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat("Iteration:    Power        (time elapsed)    \n")
cat(paste0(counter, "/", len), ":  ", power_of_test, " (")
cat(time_iteration, ") \n")
if(counter %% 10 == 0){
Result <- data.table(Power = TestPower, combination = combination)
fwrite(Result, paste0(dirresults, "/Results.csv"))
}
#stop("stoppete")
}
}
}
}
}
}
#---------------
# Saving results
#---------------
fwrite(DT_comb, paste0(dirresults, "/DT_combinations.csv"))
Result <- data.table(Power = TestPower, combination = combination)
if (length(TestPower) != length(combination)) {
warning("Result: length(TestPower) != length(combination)")
}
fwrite(Result, paste0(dirresults, "/Results.csv"))
#save.image(paste0(dirresults, "/env.RData"))
runApp('08_dashboard/app_v5.R')
runApp('08_dashboard/app_v5.R')
TableType_2015_2019 <- fread("/home/giorgio/Seafile/ConcePTIONcomponents/pregnancy/work/ARS_results/221018/g_export_manuscript/TableType_2015_2019.csv")
library(ggplot2)
library(ggthemes)
library(data.table)
library(magrittr)
library(multipanelfigure)
TableType_2015_2019 <- fread("/home/giorgio/Seafile/ConcePTIONcomponents/pregnancy/work/ARS_results/221018/g_export_manuscript/TableType_2015_2019.csv")
file.choose()
TableType_2015_2019 <- fread("/home/giorgio/Seafile/ConcePTIONcomponents/pregnancy/work/ARS_results/221018/g_export_manuscript/TableType_2015_2019.csv")
TableType_2015_2019 <- fread("C:\\Users\\giorg\\Seafile\\ConcePTIONcomponents\\pregnancy\\work\\ARS_results\\221018\\g_export_manuscript\\TableType_2015_2019.csv")
View(TableType_2015_2019)
#### Tabelle
tab <- copy(TableType_2015_2019)
tab <- tab[, .(N = sum(N)), by = c("type_of_pregnancy_end", "year_start_of_pregnancy")]
View(tab)
TableType_2015_2019 <- TableType_2015_2019[N == "<5", N := 0]
TableType_2015_2019 <- TableType_2015_2019[, N := as.integer(N)]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "LB", type_of_pregnancy_end:=  "Nati vivi"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "SA", type_of_pregnancy_end:=  "Aborti spontanei"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "SB", type_of_pregnancy_end:=  "Nati morti"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "T", type_of_pregnancy_end:=   "IVG"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "UNK", type_of_pregnancy_end:= "Non classificabile"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "ECT", type_of_pregnancy_end:= "Ectopiche"]
TableType_2015_2019 <- TableType_2015_2019[order_quality <= 3, colore := "Registri"]
TableType_2015_2019 <- TableType_2015_2019[order_quality >= 15, colore := "Prestazioni ambulatoriali"]
TableType_2015_2019 <- TableType_2015_2019[is.na(colore), colore := "SDO, PS"]
#### Tabelle
tab <- copy(TableType_2015_2019)
tab <- tab[, .(N = sum(N)), by = c("type_of_pregnancy_end", "year_start_of_pregnancy")]
View(tab)
tab <- dcast.data.table(tab, type_of_pregnancy_end ~ year_start_of_pregnancy, value.var = "N")
tab
#### Tabelle
tab <- copy(TableType_2015_2019)
tab <- tab[, .(N = sum(N)), by = c("type_of_pregnancy_end", "year_start_of_pregnancy")]
tab <- dcast.data.table(tab,  year_start_of_pregnancy ~ type_of_pregnancy_end, value.var = "N")
tab
setnames(tab, "year_start_of_pregnancy", "Anno di inizio gravidanza" )
tab
TableQuality_2015_2019 <- fread("/home/giorgio/Seafile/ConcePTIONcomponents/pregnancy/work/ARS_results/221018/g_export_manuscript/TableQuality_2015_2019.csv")
TableQuality_2015_2019 <- fread("C:\\Users\\giorg\\Seafile/ConcePTIONcomponents/pregnancy/work/ARS_results/221018/g_export_manuscript/TableQuality_2015_2019.csv")
ggplot(TableQuality_2015_2019, aes(x = year_start_of_pregnancy, y = N, fill = as.factor(order_quality)))+
geom_col()+
scale_fill_discrete("")+
ylab("")+
xlab("")+
theme_hc()+
theme(text = element_text(family = "serif"))
file.choose()
tab
TableType_2015_2019 <- fread("C:\\Users\\giorg\\Seafile\\ConcePTIONcomponents\\pregnancy\\work\\ARS_results\\221018\\g_export_manuscript\\TableType_2015_2019.csv")
#TableType_2015_2019 <- fread("~/Seafile/ConcePTIONcomponents/pregnancy/work/ARS_results/221018/g_export_manuscript/TableType_2015_2019.csv")
TableType_2015_2019 <- TableType_2015_2019[N == "<5", N := 0]
TableType_2015_2019 <- TableType_2015_2019[, N := as.integer(N)]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "LB",  type_of_pregnancy_end:= "Nati vivi"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "SA",  type_of_pregnancy_end:= "Aborti spontanei"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "SB",  type_of_pregnancy_end:= "Nati morti"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "T",   type_of_pregnancy_end:= "IVG"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "UNK", type_of_pregnancy_end:= "Non classificabile"]
TableType_2015_2019 <- TableType_2015_2019[type_of_pregnancy_end == "ECT", type_of_pregnancy_end:= "Ectopiche"]
TableType_2015_2019 <- TableType_2015_2019[order_quality <= 3, colore := "Registri"]
TableType_2015_2019 <- TableType_2015_2019[order_quality >= 15, colore := "Prestazioni ambulatoriali"]
TableType_2015_2019 <- TableType_2015_2019[is.na(colore), colore := "SDO, PS"]
###############################
# uno <- ggplot(TableType_2015_2019[type_of_pregnancy_end %in% c("LB")], aes(x = year_start_of_pregnancy, y = N, fill = as.factor(colore)))+
#   geom_col()+
#   #scale_fill_discrete("")+
#   scale_fill_manual( values = c("1. Verde"="forestgreen",
#                                 "2. Giallo"="darkgoldenrod1",
#                                 "3. Rosso" = "firebrick"),
#                      name = "") +
#   ylab("")+
#   xlab("")+
#   theme_hc()+
#   facet_wrap(type_of_pregnancy_end ~ .)+
#   theme(text = element_text(family = "serif"))+
#  theme(legend.position = "none")
#######################################
due <- ggplot(TableType_2015_2019[type_of_pregnancy_end %in% c("Nati vivi",
"Aborti spontanei",
"IVG",
"Non classificabile")],
aes(x = year_start_of_pregnancy, y = N, fill = as.factor(colore)))+
geom_col()+
scale_fill_manual( values = c("Registri"="forestgreen",
"SDO, PS"="darkgoldenrod1",
"Prestazioni ambulatoriali" = "firebrick"),
name = "") +
ylab("")+
xlab("")+
theme_hc()+
facet_grid(. ~ type_of_pregnancy_end)+
theme(text = element_text(family = "serif"))
###########################
tre <- ggplot(TableType_2015_2019[type_of_pregnancy_end %in% c("Ectopiche",
"Nati morti")],
aes(x = year_start_of_pregnancy, y = N, fill = as.factor(colore)))+
geom_col()+
scale_fill_manual( values = c("Registri"="forestgreen",
"SDO, PS"="darkgoldenrod1",
"Prestazioni ambulatoriali" = "firebrick"),
name = "") +
ylab("")+
xlab("")+
theme_hc()+
facet_wrap(type_of_pregnancy_end ~ .)+
theme(text = element_text(family = "serif"))+theme(legend.position = "none")
###########################
figure1 <- multi_panel_figure(width = 300, height = 100, columns = 6, rows = 5, panel_label_type = "none",row_spacing = 0, column_spacing =0)
figure1 %<>%
fill_panel(due, column = 1:4, row = 1:5) %<>%
fill_panel(tre, column = 5:6, row = 2:4)
figure1
#### Tabelle
tab <- copy(TableType_2015_2019)
tab <- tab[, .(N = sum(N)), by = c("type_of_pregnancy_end", "year_start_of_pregnancy")]
tab <- dcast.data.table(tab,  year_start_of_pregnancy ~ type_of_pregnancy_end, value.var = "N")
setnames(tab, "year_start_of_pregnancy", "Anno di inizio gravidanza" )
fwrite(tab, "~/Seafile\\ConcePTIONcomponents\\pregnancy\\call\\221115_IT\\tabella_risultati.csv")
fwrite(tab, "C:\\Users\\giorg\\Seafile\\ConcePTIONcomponents\\pregnancy\\call\\221115_IT\\tabella_risultati.csv")
0.2858/0.7142
