DT_3 <- DT[sample_size == "200_200_100", .(prop_exp , prev_ne , risk, SE_exp, bias_mis, sd_mis, rmse_mis, bias_single, sd_single, rmse_single)]
DT_3 <- DT_3[, id := paste(prop_exp , prev_ne , risk, SE_exp, sep = "_")]
DT_3_m <- melt(DT_3, id.vars = c("id"),
measure.vars = c("bias_mis", "sd_mis", "rmse_mis", "bias_single", "sd_single", "rmse_single"))
setnames(DT_3_m, "value", "sample_500" )
DT_3_m
DT_final <- merge(DT_2_m, DT_3_m[, .(id, sample_500)], by = "id")
DT_final <- merge(DT_2_m, DT_3_m[, .(id, sample_500)], by = "id", all.x = T)
DT_2_m
DT_3_m
unique(DT_2_m[, .(id)])
DT <- copy(as.data.table(DT_comb_RR))
DT_2 <- DT[sample_size == "100_100_50", .(prop_exp , prev_ne , risk, SE_exp, bias_mis, sd_mis, rmse_mis, bias_single, sd_single, rmse_single)]
DT_2 <- DT_2[, id := paste(prop_exp , prev_ne , risk, SE_exp, sep = "_")]
DT_2_m <- melt(DT_2, id.vars = c("id"),
measure.vars = c("bias_mis", "sd_mis", "rmse_mis", "bias_single", "sd_single", "rmse_single"))
setnames(DT_2_m, "value", "sample_250" )
DT_3 <- DT[sample_size == "200_200_100", .(prop_exp , prev_ne , risk, SE_exp, bias_mis, sd_mis, rmse_mis, bias_single, sd_single, rmse_single)]
DT_3 <- DT_3[, id := paste(prop_exp , prev_ne , risk, SE_exp, sep = "_")]
DT_3_m <- melt(DT_3, id.vars = c("id"),
measure.vars = c("bias_mis", "sd_mis", "rmse_mis", "bias_single", "sd_single", "rmse_single"))
setnames(DT_3_m, "value", "sample_500" )
DT_final <- merge(DT_2_m, DT_3_m[, .(id, sample_500)], by = "id", all.x = T)
DT_2_m
View(DT_2)
View(DT_2_m)
View(DT_3_m)
DT_final <- merge(DT_2_m, DT_3_m[, .(id, variable, sample_500)], by = c("id", "variable"), all.x = T)
View(DT_final)
DT_final
DT_4 <- merge(DT_2_m, DT_3_m[, .(id, variable, sample_500)], by = c("id", "variable"), all.x = T)
DT_4_mis[variable == "bias_mis"| variable == "sd_mis" |variable ==  "rmse_mis"]
DT_4_mis <- DT_4[variable == "bias_mis"| variable == "sd_mis" |variable ==  "rmse_mis"]
DT_4_single <- DT_4[variable == "bias_single"| variable == "sd_single" |variable ==  "rmse_single"]
DT_4_mis
DT_4_single
DT_4 <- DT_4[ variable == "bias_mis" | variable == "bias_single", var_id := "bias"]
DT_4 <- DT_4[ variable == "sd_mis " | variable == "sd_single", var_id := "bias"]
DT_4 <- DT_4[ variable == "rmse_mis" | variable == "rmse_single", var_id := "bias"]
View(DT_4)
DT_4 <- DT_4[ variable == "bias_mis" | variable == "bias_single", var_id := "bias"]
DT_4 <- DT_4[ variable == "sd_mis" | variable == "sd_single", var_id := "bias"]
DT_4 <- DT_4[ variable == "rmse_mis" | variable == "rmse_single", var_id := "bias"]
View(DT_4)
DT_4 <- DT_4[ variable == "bias_mis" | variable == "bias_single", var_id := "bias"]
DT_4 <- DT_4[ variable == "sd_mis" | variable == "sd_single", var_id := "sd"]
DT_4 <- DT_4[ variable == "rmse_mis" | variable == "rmse_single", var_id := "rmse"]
View(DT_4)
DT_4_mis <- DT_4[variable == "bias_mis"| variable == "sd_mis" |variable ==  "rmse_mis"]
DT_4_single <- DT_4[variable == "bias_single"| variable == "sd_single" |variable ==  "rmse_single"]
DT_5 <- merge(DT_4_mis, DT_4_single, by = c("id", "var"), all.x = T)
DT_4_mis
DT_5 <- merge(DT_4_mis, DT_4_single, by = c("id", "var_id"), all.x = T)
View(DT_5)
108/3
fwrite(DT_5, paste0(thisdir, "/05_Results/2022-7-20_18-15_RR/DT_final.csv"))
View(DT)
################################################################################
###############    Non-Differentiality Test: Simulated Data     ################
################################################################################
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#---------------------------
# Loading program parameters
#---------------------------
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/05_Results/", now, "_RR")
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#--------------------------------------
# Loading test statistic and functions
#--------------------------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
#-------------------------
# Defining data parameters
#-------------------------
prop_exp_list    <-   c(0.05, 0.2)
pi_ne_list       <-   c(0.01, 0.1)
risk_list        <-   c(0.5, 1.2, 2)
SE_exposed_list  <-   c(0.70, 0.80, 0.90)
sample_size_list <-  list(list( a = 100, b = 100, c = 50),
list( a = 200, b = 200, c = 100))
#     list( a = 300, b = 300, c = 150))
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(SE_exposed_list)*
length(sample_size_list)
TestPower <- c()
combination <- c()
DT_comb_RR <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
bias_mis = integer(0),
sd_mis = integer(0),
rmse_mis =integer(0),
bias_single = integer(0),
sd_single = integer(0),
rmse_single =integer(0),
power = integer(0),
SE_exp = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
#-------------------
# Running simulation
#-------------------
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in SE_exposed_list) {
for (z in sample_size_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k, "_", z$a, "_", z$b, "_", z$c))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz_scenarios.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability_sample_strata_exp.R"))
#-----------------
# RR distribution
#-----------------
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution_with_C_sample_exp.R"))
#multiple indicator
# plt_RR
# mean(RR_est)
# sqrt(var(RR_est))
#single indicator
# plt_RR_single_indicator
# mean(RR_single_indicator)
# sqrt(var(RR_single_indicator))
# #ggsave(paste0(thisdir, "/09_Figures/RR_scenario1.png"))
#--------------------------
# Non Differentiality test
#--------------------------
### Bootstrap single test
source(paste0(thisdir,"/04_TestApplication/BootTest_with_C_sample_exp.R"))
#plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
### Test Power
#source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#power_of_test
power_of_test = 2
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
bias_mis = mean(RR_est) - t,
sd_mis = sqrt(var(RR_est)),
rmse_mis = rmse_RR_multiple,
bias_single = mean(RR_single_indicator) - t,
sd_single = sqrt(var(RR_single_indicator)),
rmse_single = rmse_RR_single,
power = power_of_test,
sample_size = paste0(z$a, "_", z$b, "_", z$c),
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb_RR <- rbind(DT_comb_RR, tmp)
counter <- counter + 1
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat(paste0(counter, "/", len), ":  ")
cat(time_iteration, "\n")
fwrite(DT_comb_RR, paste0(dirresults,"/DT_comb_RR.csv"))
}
}
}
}
}
fwrite(DT_comb_RR, paste0(dirresults,"/DT_comb_RR.csv"))
library(readr)
DT_comb_RR <- read_csv("05_Results/2022-7-25_17-14_RR/DT_comb_RR.csv")
View(DT_comb_RR)
DT <- copy(as.data.table(DT_comb_RR))
DT_1 <- unique(DT[ risk != 0.5, .(prev_ne, risk, prop_exp,SE_A_e, SE_A_ne)])[order(-prev_ne, -risk, prop_exp,SE_A_e )]
fwrite(DT_1, paste0(thisdir, "/05_Results/2022-7-20_18-15_RR/DT.csv"))
DT_2 <- DT[sample_size == "100_100_50", .(prop_exp , prev_ne , risk, SE_exp, bias_mis, sd_mis, rmse_mis, bias_single, sd_single, rmse_single)]
DT_2 <- DT_2[, id := paste(prop_exp , prev_ne , risk, SE_exp, sep = "_")]
DT_2_m <- melt(DT_2, id.vars = c("id"),
measure.vars = c("bias_mis", "sd_mis", "rmse_mis", "bias_single", "sd_single", "rmse_single"))
setnames(DT_2_m, "value", "sample_250" )
DT_3 <- DT[sample_size == "200_200_100", .(prop_exp , prev_ne , risk, SE_exp, bias_mis, sd_mis, rmse_mis, bias_single, sd_single, rmse_single)]
DT_3 <- DT_3[, id := paste(prop_exp , prev_ne , risk, SE_exp, sep = "_")]
DT_3_m <- melt(DT_3, id.vars = c("id"),
measure.vars = c("bias_mis", "sd_mis", "rmse_mis", "bias_single", "sd_single", "rmse_single"))
setnames(DT_3_m, "value", "sample_500" )
DT_4 <- merge(DT_2_m, DT_3_m[, .(id, variable, sample_500)], by = c("id", "variable"), all.x = T)
DT_4 <- DT_4[ variable == "bias_mis" | variable == "bias_single", var_id := "bias"]
DT_4 <- DT_4[ variable == "sd_mis" | variable == "sd_single", var_id := "sd"]
DT_4 <- DT_4[ variable == "rmse_mis" | variable == "rmse_single", var_id := "rmse"]
DT_4_mis <- DT_4[variable == "bias_mis"| variable == "sd_mis" |variable ==  "rmse_mis"]
DT_4_single <- DT_4[variable == "bias_single"| variable == "sd_single" |variable ==  "rmse_single"]
DT_5 <- merge(DT_4_mis, DT_4_single, by = c("id", "var_id"), all.x = T)
View(DT_5)
View(DT_comb_RR)
################################################################################
###############    Non-Differentiality Test: Simulated Data     ################
################################################################################
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#---------------------------
# Loading program parameters
#---------------------------
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/05_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-----------------------
# Loading test statistic
#-----------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
#-------------------------
# Defining data parameters
#-------------------------
prop_exp_list    <-   c(0.05) #c(0.05, 0.2)                                     #c(0.05)
pi_ne_list       <-   c(0.01) #c(0.01, 0.1)                                     #c(0.01)
risk_list        <-   c(0.5)  #c(0.5, 1.2, 2)                                   #c(0.5)
SE_exposed_list  <-   c(0.5)  #c(0.15, 0.30, 0.40, 0.50, 0.60, 0.70, 0.85)      #c(0.5)
sample_size_list <-  list(list( a = 100, b = 100, c = 50))  #list(list( a = 100, b = 100, c = 50),           #c(500)
#     list( a = 200, b = 200, c = 100),
#     list( a = 300, b = 300, c = 150))
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(SE_exposed_list)*
length(sample_size_list)
TestPower <- c()
combination <- c()
DT_comb <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
SE_exp = integer(0),
power = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
#-------------------
# Running simulation
#-------------------
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in SE_exposed_list) {
for (z in sample_size_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k, "_", z$a, "_", z$b, "_", z$c))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability_sample_strata_exp.R"))
#---------------------
# Computing test power
#---------------------
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#----------------------------------
# Computing PPV and RR distribution
#----------------------------------
source(paste0(thisdir,"/06_PPV/PPV_RR_distribution_parlapply.R"))
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
power = power_of_test,
sample_size = paste0(z$a, "_", z$b, "_", z$c),
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, power_of_test)
counter <- counter + 1
fwrite(DT_PPV_RR, paste0(dirresults,
"/DT_PPV_RR_",
combination[counter],
".csv"))
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat(paste0(counter, "/", len), ":  ")
cat(time_iteration, "\n")
if(counter %% 10 == 0){
Result <- data.table(Power = TestPower, combination = combination)
fwrite(Result, paste0(dirresults, "/Results.csv"))
}
stop("stoppete")
}
}
}
}
}
Result
Result <- data.table(Power = TestPower, combination = combination)
Result
library(readr)
DT_comb_RR <- read_csv("05_Results/2022-7-25_17-14_RR/DT_comb_RR.csv")
View(DT_comb_RR)
View(DT_comb_RR)
DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01]
DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01]
names(DT_comb_RR)
DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01]
DT_comb_RR <- as.data.table(DT_comb_RR)
DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01]
DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01 & risk == 2]
tmp <- DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01 & risk == 2]
DT.m1 = melt(DT, id.vars = c("bias_single ", "bias_mis"),
measure.vars = c("SE_A_e", "SE_A_ne"))
DT.m1 = melt(tmp, id.vars = c("bias_single ", "bias_mis"),
measure.vars = c("SE_A_e", "SE_A_ne"))
DT.m1 = melt(tmp, id.vars = c("bias_single", "bias_mis"),
measure.vars = c("SE_A_e", "SE_A_ne"))
DT.m1
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
DT.m1
tmp
tmp <- DT_comb_RR[prop_exp == 0.05 & prev_ne == 0.01 & risk == 2 & sample_size == "200_200_100"]
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
tmp <- ggplot(DT_comb_RR, aes())
tmp
tmp
tmp
DT.m1
tmp <- ggplot(DT.m1, aes(SE_A_e, value, col = variable))+
geom_point()+
geom_line()
tmp
DT_comb_RR
View(DT_comb_RR)
for (prop in c(0.05, 0.2)) {
for (prev in c(0.01, 0.10)) {
for (ris in c(0.5, 1.2, 2.0)) {
tmp <- DT_comb_RR[prop_exp == prop & prev_ne == prev & risk == ris & sample_size == "200_200_100"]
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
plt <- ggplot(DT.m1, aes(SE_A_e, value, col = variable))+
geom_point()+
geom_line()+
ggtitle(paste0("prop:", prop, " prev:", prev, "risk:", ris))
plt
}
}
}
for (prop in c(0.05, 0.2)) {
for (prev in c(0.01, 0.10)) {
for (ris in c(0.5, 1.2, 2.0)) {
tmp <- DT_comb_RR[prop_exp == prop & prev_ne == prev & risk == ris & sample_size == "200_200_100"]
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
plt <- ggplot(DT.m1, aes(SE_A_e, value, col = variable))+
geom_point()+
geom_line()+
ggtitle(paste0("prop:", prop, " prev:", prev, "risk:", ris))
plt
}
}
}
for (prop in c(0.05, 0.2)) {
for (prev in c(0.01, 0.10)) {
for (ris in c(0.5, 1.2, 2.0)) {
tmp <- DT_comb_RR[prop_exp == prop & prev_ne == prev & risk == ris & sample_size == "200_200_100"]
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
plt <- ggplot(DT.m1, aes(SE_A_e, value, col = variable))+
geom_point()+
geom_line()+
ggtitle(paste0("prop:", prop, " prev:", prev, "risk:", ris))
tmp <- paste0("prop:", prop, " prev:", prev, "risk:", ris)
assign(tmp, plt)
}
}
}
for (prop in c(0.05, 0.2)) {
for (prev in c(0.01, 0.10)) {
for (ris in c(0.5, 1.2, 2.0)) {
tmp <- DT_comb_RR[prop_exp == prop & prev_ne == prev & risk == ris & sample_size == "200_200_100"]
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
plt <- ggplot(DT.m1, aes(SE_A_e, value, col = variable))+
geom_point()+
geom_line()+
ggtitle(paste0("prop:", prop, " prev:", prev, "risk:", ris))
tmp <- paste0("prop:", prop, " prev:", prev, " risk:", ris)
assign(tmp, plt)
}
}
}
View(`prop:0.05 prev:0.01 risk:0.5`)
for (prop in c(0.05, 0.2)) {
for (prev in c(0.01, 0.10)) {
for (ris in c(0.5, 1.2, 2.0)) {
tmp <- DT_comb_RR[prop_exp == prop & prev_ne == prev & risk == ris & sample_size == "200_200_100"]
DT.m1 = melt(tmp, id.vars = c("SE_A_e", "SE_A_ne"),
measure.vars = c("bias_single", "bias_mis"))
plt <- ggplot(DT.m1, aes(SE_A_e, value, col = variable))+
geom_point()+
geom_line()+
ggtitle(paste0("prop:", prop, " prev:", prev, "risk:", ris))
tmp <- paste0("prop:", prop, " prev:", prev, " risk:", ris)
assign(tmp, plt)
print(plt)
}
}
}
