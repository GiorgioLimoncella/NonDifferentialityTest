plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
test_power
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power # 1
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(11)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(5)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
plt_RR
thisdir
ggsave(plt_RR, paste0(thisdir, "/09_figures/RR_scenario1.png") )
help(ggsave)
ggsave(paste0(thisdir, "/09_figures/RR_scenario1.png") )
plt_test
plt_test
ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
P_A_e = data[A==1&E==1, .N]/data[E==1, .N]
P_A_ne = data[A==1&E==0, .N]/data[E==0, .N]
P_B_e = data[B==1&E==1, .N]/data[E==1, .N]
P_B_ne = data[B==1&E==0, .N]/data[E==0, .N]
P_C_e = data[C==1&E==1, .N]/data[E==1, .N]
P_C_ne = data[C==1&E==0, .N]/data[E==0, .N]
P_A =  data[A==1, .N]/N
P_B = data[B==1, .N]/N
P_C = data[C==1, .N]/N
DT_A <- data[A==1]
DT_B <- data[B==1]
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
tx_boot=c()
RR_est=c( )
RR_single_indicator=c( )
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=c( )
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=c( )
for(i in 1:nsam){
sam_Ya1 = DT_A[sample(nrow(DT_A),na),]
sam_Yb1 = DT_B[sample(nrow(DT_B),nb),]
PPV_A_e0 = c(PPV_A_e0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==1))/
(sum(sam_Ya1$A==1&sam_Ya1$E==1)))
PPV_B_e0 = c(PPV_B_e0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==1))/
(sum(sam_Yb1$B==1&sam_Yb1$E==1)))
PPV_A_ne0 = c(PPV_A_ne0,
(sum(sam_Ya1$A==1&sam_Ya1$Y==1&sam_Ya1$E==0))/
(sum(sam_Ya1$A==1&sam_Ya1$E==0)))
PPV_B_ne0 = c(PPV_B_ne0,
(sum(sam_Yb1$B==1&sam_Yb1$Y==1&sam_Yb1$E==0))/
(sum(sam_Yb1$B==1&sam_Yb1$E==0)))
RR_est = c(RR_est, RiskRatio_est(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e0[i],
PPV_B_e =  PPV_B_e0[i],
PPV_A_ne = PPV_A_ne0[i],
PPV_B_ne =  PPV_B_ne0[i]))
RR_single_indicator = c( RR_single_indicator, (P_A_e/P_A_ne) * (PPV_A_ne0[i]/PPV_A_e0[i]))
}
DT_RR_est <- data.table(RR_estimate = RR_est)
plt_RR <- ggplot(DT_RR_est, aes(RR_estimate))+
geom_density(col="salmon", fill="salmon", alpha = 0.5)+
#scale_x_continuous(breaks = c(-0.5, 0, 0.5), limits = c(-0.2,1))+
geom_vline(xintercept = mean(RR_est), col="salmon")+
geom_vline(xintercept = risk, col="black")+
labs(x="Risk Ratio estimate", y="")+
theme_minimal()
DT_RR_single_indicator_est <- data.table(RR_estimate = RR_single_indicator)
plt_RR_single_indicator <- ggplot(DT_RR_single_indicator_est, aes(RR_estimate))+
geom_density(col="salmon", fill="salmon", alpha = 0.5)+
#scale_x_continuous(breaks = c(-0.5, 0, 0.5), limits = c(-0.2,1))+
geom_vline(xintercept = mean(RR_est), col="salmon")+
geom_vline(xintercept = risk, col="black")+
labs(x="Risk Ratio estimate", y="")+
theme_minimal()
plt_RR_single_indicator
2.24*2
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est) # 1.941722
sqrt(var(RR_est))
#multiple indicator
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
PPV_A_ne0
PPV_A_e0
PPV_A_ne0/PPV_A_e0
plot(PPV_A_ne0/PPV_A_e0)
P_A_e/P_A_ne
### starting parameters
N        <- 200000
prop_exp <- 0.2
pi_ne    <- 0.05
risk     <- 2
pi_e     <- pi_ne*risk
### validation indices: SE_AUB
SE_AUB           <- 0.90
### validation indices: E=1 & Y=1
SE_A_e           <- 0.8
SE_B_given_A_e   <- 0.8
SE_A_int_B_e       <- SE_A_e * SE_B_given_A_e
SE_B_e             <- SE_AUB - SE_A_e + SE_A_int_B_e
SE_A_given_B_e     <- SE_A_int_B_e / SE_B_e
SE_B_given_not_A_e <- (SE_B_e - SE_A_int_B_e) / (1 - SE_A_e)
### validation indices: E=0 & Y=1
SE_A_ne          <- 0.8
SE_B_given_A_ne  <- 0.8
SE_A_int_B_ne       <- SE_A_ne * SE_B_given_A_ne
SE_B_ne             <- SE_AUB - SE_A_ne + SE_A_int_B_ne
SE_A_given_B_ne     <- SE_A_int_B_ne / SE_B_ne
SE_B_given_not_A_ne <- (SE_B_ne - SE_A_int_B_ne) / (1 - SE_A_ne)
SE_B_e
SE_A_e
### validation indices: E=1 & Y=1
SE_A_e           <- 0.6
SE_B_given_A_e   <- 0.8
SE_A_int_B_e       <- SE_A_e * SE_B_given_A_e
SE_B_e             <- SE_AUB - SE_A_e + SE_A_int_B_e
SE_A_given_B_e     <- SE_A_int_B_e / SE_B_e
SE_B_given_not_A_e <- (SE_B_e - SE_A_int_B_e) / (1 - SE_A_e)
SE_B_e
SE_AUB           <- 0.95
### validation indices: E=1 & Y=1
SE_A_e           <- 0.8
SE_B_given_A_e   <- 0.8
SE_A_int_B_e       <- SE_A_e * SE_B_given_A_e
SE_B_e             <- SE_AUB - SE_A_e + SE_A_int_B_e
SE_A_given_B_e     <- SE_A_int_B_e / SE_B_e
SE_B_given_not_A_e <- (SE_B_e - SE_A_int_B_e) / (1 - SE_A_e)
SE_B_e
### starting parameters
N        <- 200000
prop_exp <- 0.2
pi_ne    <- 0.05
risk     <- 2
pi_e     <- pi_ne*risk
### validation indices: SE_AUB
SE_AUB           <- 0.95
### validation indices: E=1 & Y=1
SE_A_e           <- 0.7
SE_B_given_A_e   <- 0.8
SE_A_int_B_e       <- SE_A_e * SE_B_given_A_e
SE_B_e             <- SE_AUB - SE_A_e + SE_A_int_B_e
SE_A_given_B_e     <- SE_A_int_B_e / SE_B_e
SE_B_given_not_A_e <- (SE_B_e - SE_A_int_B_e) / (1 - SE_A_e)
### validation indices: E=0 & Y=1
SE_A_ne          <- 0.7
SE_B_given_A_ne  <- 0.8
SE_A_int_B_ne       <- SE_A_ne * SE_B_given_A_ne
SE_B_ne             <- SE_AUB - SE_A_ne + SE_A_int_B_ne
SE_A_given_B_ne     <- SE_A_int_B_ne / SE_B_ne
SE_B_given_not_A_ne <- (SE_B_ne - SE_A_int_B_ne) / (1 - SE_A_ne)
### validation indices: E=1 & Y=0
SP_A_e           <- 0.995
SP_B_e           <- 0.99
### validation indices: E=0 & Y=0
SP_A_ne          <- 0.995
SP_B_ne          <- 0.99
### Bootstrap parameters
na    = 250  # A sample size
nb    = 250  # B sample size
nsam  = 1000 # Monte Carlo rep
nboot = 500  # Bootstrap sample size
SE_A_e
SE_B_e
SE_A_ne
SE_B_ne
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
#multiple indicator
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
#ggsave(paste0(thisdir, "/09_Figures/RR_scenario1.png"))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power # 1
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario2.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est) # 1.941722
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power # 0.749
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario2.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est) # 1.941722
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power # 0.749
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
#multiple indicator
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power # 0.749
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario1.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
set.seed(7)
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
#multiple indicator
plt_RR
mean(RR_est) # 1.983564
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
#ggsave(paste0(thisdir, "/09_Figures/RR_scenario1.png"))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
#ggsave(paste0(thisdir, "/09_Figures/Test_scenario1.png"))
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power # 1
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario2.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
plt_RR
mean(RR_est)
sqrt(var(RR_est))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading program parameters
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
### Setting study parameters
source(paste0(thisdir,"/01_Parameters/TestParameters_scenario3_ND.R"))
### Loading test functions
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
source(paste0(thisdir,"/02_TestFunctions/RiskRatio_estimator.R"))
### Generating data
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
### RR distribution
source(paste0(thisdir,"/07_RR/RiskRatio_MC_distribution.R"))
#multiple indicator
plt_RR
mean(RR_est)
sqrt(var(RR_est))
#single indicator
plt_RR_single_indicator
mean(RR_single_indicator)
sqrt(var(RR_single_indicator))
### Non Differentiality test
source(paste0(thisdir,"/04_TestApplication/BootTest.R"))
plt_test
### Test Power
source(paste0(thisdir,"/04_TestApplication/TestPower.R"))
test_power
library(shiny); runApp('08_dashboard/app_v2.R')
