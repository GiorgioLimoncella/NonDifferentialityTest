for (t in risk_list) {
for (k in SE_exposed_list) {
for (z in sample_size_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k, "_", z))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
#---------------------
# Computing test power
#---------------------
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#----------------------------------
# Computing PPV and RR distribution
#----------------------------------
source(paste0(thisdir,"/06_PPV/PPV_RR_distribution_parlapply.R"))
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
power = power_of_test,
sample_size = z,
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, power_of_test)
counter <- counter + 1
# fwrite(DT_PPV_RR, paste0(dirresults,
#                          "/DT_PPV_RR_",
#                          combination[counter],
#                          ".csv"))
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat(paste0(counter, "/", len), ":  ")
cat(time_iteration, "\n")
}
}
}
}
}
TestPower
40/9
View(list_of_samples)
list_of_original_samples[["A"]]
list_of_samples[[1]]
list_of_original_samples <- list_of_samples[[1]]
sample_tmp_A_e <- list_of_original_samples[["A"]][list_of_original_samples[["A"]]$E==1,]
sample_tmp_B_e <- list_of_original_samples[["B"]][list_of_original_samples[["B"]]$E==1,]
sample_tmp_C_e <- list_of_original_samples[["C"]][list_of_original_samples[["C"]]$E==1,]
sample_tmp_A_ne <- list_of_original_samples[["A"]][list_of_original_samples[["A"]]$E==0,]
sample_tmp_B_ne <- list_of_original_samples[["B"]][list_of_original_samples[["B"]]$E==0,]
sample_tmp_C_ne <- list_of_original_samples[["C"]][list_of_original_samples[["C"]]$E==0,]
sample_tmp_A_e
View(sample_tmp_A_e)
TX_boot = c()
for (v in 1:nboot) {
#original_sample_A_e <- list_of_original_samples[["A"]][list_of_original_samples[["A"]]$E==1]
boot_sample_tmp_A = rbind(sample_tmp_A_e[sample(nrow(sample_tmp_A_e), na_e, replace = TRUE),],
sample_tmp_A_ne[sample(nrow(sample_tmp_A_ne), na_ne, replace = TRUE),])
boot_sample_tmp_B = rbind(sample_tmp_B_e[sample(nrow(sample_tmp_B_e), nb_e, replace = TRUE),],
sample_tmp_B_ne[sample(nrow(sample_tmp_B_ne), nb_ne, replace = TRUE),])
boot_sample_tmp_C= rbind(sample_tmp_C_e[sample(nrow(sample_tmp_C_e), nc_e, replace = TRUE),],
sample_tmp_C_ne[sample(nrow(sample_tmp_C_ne), nc_ne, replace = TRUE),])
# A=1 & E=1
PPV_A_e_tmp = (sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$Y==1 & boot_sample_tmp_A$E==1)) /
(sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==1))
PPV_A_e_tmp = ifelse(PPV_A_e_tmp>0 & (!is.na(PPV_A_e_tmp)) & PPV_A_e_tmp != Inf,
PPV_A_e_tmp,  1/(2*sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==1)))
# B=1 & E=1
PPV_B_e_tmp = (sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$Y==1 & boot_sample_tmp_B$E==1)) /
(sum(boot_sample_tmp_B$B==1 &  boot_sample_tmp_B$E==1))
PPV_B_e_tmp = ifelse(PPV_B_e_tmp>0 & (!is.na(PPV_B_e_tmp)) & PPV_B_e_tmp != Inf,
PPV_B_e_tmp,  1/(2*sum(boot_sample_tmp_B$B==1 &  boot_sample_tmp_B$E==1)))
# C=1 & E=1
PPV_C_e_tmp = (sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$Y==1 & boot_sample_tmp_C$E==0)) /
(sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0))
PPV_C_e_tmp = ifelse(PPV_C_e_tmp>0 & (!is.na(PPV_C_e_tmp)) & PPV_C_e_tmp != Inf,
PPV_C_e_tmp,  1/(2*sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0)))
# A=1 & E=0
PPV_A_ne_tmp = (sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$Y==1 & boot_sample_tmp_A$E==0)) /
(sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==0))
PPV_A_ne_tmp = ifelse(PPV_A_ne_tmp>0 & (!is.na(PPV_A_ne_tmp)) & PPV_A_ne_tmp != Inf,
PPV_A_ne_tmp,  1/(2*sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==0)))
# B=1 & E=0
PPV_B_ne_tmp = (sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$Y==1 & boot_sample_tmp_B$E==0)) /
(sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$E==0))
PPV_B_ne_tmp = ifelse(PPV_B_ne_tmp>0 & (!is.na(PPV_B_ne_tmp)) & PPV_B_ne_tmp != Inf,
PPV_B_ne_tmp,  1/(2*sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$E==0)))
# C=1 & E=0
PPV_C_ne_tmp = (sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$Y==1 & boot_sample_tmp_C$E==0)) /
(sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0))
PPV_C_ne_tmp = ifelse(PPV_C_ne_tmp>0 & (!is.na(PPV_C_ne_tmp)) & PPV_C_ne_tmp != Inf,
PPV_C_ne_tmp,  1/(2*sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0)))
# Test Statistic
TX_boot[v] = statistic_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e_tmp,
PPV_B_e =  PPV_B_e_tmp,
PPV_C_e =  PPV_C_e_tmp,
PPV_A_ne = PPV_A_ne_tmp,
PPV_B_ne =  PPV_B_ne_tmp,
PPV_C_ne =  PPV_C_ne_tmp)
}
TX_boot
PPV_A_e_tmp
PPV_A_e_tmp
PPV_B_e_tmp
PPV_C_e_tmp
PPV_A_ne_tmp
PPV_B_ne_tmp
PPV_C_ne_tmp
statistic_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e_tmp,
PPV_B_e =  PPV_B_e_tmp,
PPV_C_e =  PPV_C_e_tmp,
PPV_A_ne = PPV_A_ne_tmp,
PPV_B_ne =  PPV_B_ne_tmp,
PPV_C_ne =  PPV_C_ne_tmp)
quant_025 = quantile(TX_boot, 0.025, na.rm = T)
quant_975 = quantile(TX_boot, 0.975, na.rm = T)
as.integer(quant_025 < 0 & quant_975>0)
quant_025
quant_975
################################################################################
###############    Non-Differentiality Test: Simulated Data     ################
################################################################################
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#---------------------------
# Loading program parameters
#---------------------------
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/05_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-----------------------
# Loading test statistic
#-----------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
#-------------------------
# Defining data parameters
#-------------------------
prop_exp_list    <- c(0.05) #c(0.05, 0.2)
pi_ne_list       <- c(0.01) #c(0.01, 0.1)
risk_list        <- c(0.5) #c(0.5, 1.1, 2)
SE_exposed_list  <- c(0.5) #c(0.15, 0.30, 0.40, 0.50, 0.60, 0.70, 0.85)
sample_size_list <- c(250) #c(250, 500)
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(SE_exposed_list)*
length(sample_size_list)
TestPower <- c()
combination <- c()
DT_comb <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
SE_exp = integer(0),
power = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
#-------------------
# Running simulation
#-------------------
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in SE_exposed_list) {
for (z in sample_size_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k, "_", z))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
#---------------------
# Computing test power
#---------------------
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#----------------------------------
# Computing PPV and RR distribution
#----------------------------------
source(paste0(thisdir,"/06_PPV/PPV_RR_distribution_parlapply.R"))
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
power = power_of_test,
sample_size = z,
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, power_of_test)
counter <- counter + 1
# fwrite(DT_PPV_RR, paste0(dirresults,
#                          "/DT_PPV_RR_",
#                          combination[counter],
#                          ".csv"))
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat(paste0(counter, "/", len), ":  ")
cat(time_iteration, "\n")
}
}
}
}
}
TestPower
TX_boot
################################################################################
###############    Non-Differentiality Test: Simulated Data     ################
################################################################################
rm(list=ls(all.names=TRUE))
#------------------------------
# Setting the working directory
#------------------------------
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
#---------------------------
# Loading program parameters
#---------------------------
source(paste0(thisdir,"/01_Parameters/ProgramParameters.R"))
#-----------------------------------------------
# Getting date and time, creating results folder
#-----------------------------------------------
now <- paste0(year(Sys.time()),
"-",
month(Sys.time()),
"-",
day(Sys.time()),
"_",
hour(Sys.time()),
"-",
minute(Sys.time()))
dirresults <- paste0(thisdir, "/05_Results/", now)
suppressWarnings(if (!file.exists(dirresults)) dir.create(file.path(dirresults)))
#-----------------------
# Loading test statistic
#-----------------------
source(paste0(thisdir,"/02_TestFunctions/TestStatistic.R"))
#-------------------------
# Defining data parameters
#-------------------------
prop_exp_list    <- c(0.05) #c(0.05, 0.2)
pi_ne_list       <- c(0.01) #c(0.01, 0.1)
risk_list        <- c(0.5) #c(0.5, 1.1, 2)
SE_exposed_list  <- c(0.5) #c(0.15, 0.30, 0.40, 0.50, 0.60, 0.70, 0.85)
sample_size_list <- c(500) #c(250, 500)
counter <- 0
len <- length(prop_exp_list)*
length(pi_ne_list)*
length(risk_list)*
length(SE_exposed_list)*
length(sample_size_list)
TestPower <- c()
combination <- c()
DT_comb <- data.table(prop_exp = integer(0),
prev_ne = integer(0),
risk = integer(0),
SE_exp = integer(0),
power = integer(0),
sample_size = integer(0),
SE_AUB = integer(0),
SE_A_e = integer(0),
SE_B_given_A_e  = integer(0),
SE_A_int_B_e = integer(0),
SE_B_e = integer(0),
SE_A_given_B_e = integer(0),
SE_B_given_not_A_e = integer(0),
SE_A_ne = integer(0),
SE_B_given_A_ne = integer(0),
SE_A_int_B_ne = integer(0),
SE_B_ne = integer(0),
SE_A_given_B_ne = integer(0),
SE_B_given_not_A_ne = integer(0),
SP_A_e = integer(0),
SP_B_e = integer(0),
SP_A_ne = integer(0),
SP_B_ne = integer(0))
#-------------------
# Running simulation
#-------------------
for (h in prop_exp_list) {
for (w in pi_ne_list) {
for (t in risk_list) {
for (k in SE_exposed_list) {
for (z in sample_size_list) {
start_iteration <- Sys.time()
combination <- c(combination, paste0(h, "_", w, "_", t, "_", k, "_", z))
#-------------------
# Setting parameters
#-------------------
source(paste0(thisdir,"/01_Parameters/TestParameters_hwtkz.R"))
#-------------
# Loading data
#-------------
source(paste0(thisdir,"/03_DataGen/ConditionalProbability.R"))
#---------------------
# Computing test power
#---------------------
source(paste0(thisdir,"/04_TestApplication/TestPower_with_C_sample_parlapply_exp.R"))
#----------------------------------
# Computing PPV and RR distribution
#----------------------------------
source(paste0(thisdir,"/06_PPV/PPV_RR_distribution_parlapply.R"))
#-------------------
# Collecting results
#-------------------
tmp <- data.table(prop_exp = h,
prev_ne = w,
risk = t,
SE_exp = k,
power = power_of_test,
sample_size = z,
SE_AUB = SE_AUB,
SE_A_e = SE_A_e,
SE_B_given_A_e  = SE_B_given_A_e,
SE_A_int_B_e = SE_A_int_B_e,
SE_B_e = SE_B_e,
SE_A_given_B_e = SE_A_given_B_e ,
SE_B_given_not_A_e = SE_B_given_not_A_e,
SE_A_ne = SE_A_ne,
SE_B_given_A_ne = SE_B_given_A_ne,
SE_A_int_B_ne = SE_A_int_B_ne,
SE_B_ne = SE_B_ne,
SE_A_given_B_ne = SE_A_given_B_ne,
SE_B_given_not_A_ne = SE_B_given_not_A_ne,
SP_A_e = SP_A_e,
SP_B_e = SP_B_e,
SP_A_ne = SP_A_ne,
SP_B_ne = SP_B_ne)
DT_comb <- rbind(DT_comb, tmp)
TestPower <- c(TestPower, power_of_test)
counter <- counter + 1
# fwrite(DT_PPV_RR, paste0(dirresults,
#                          "/DT_PPV_RR_",
#                          combination[counter],
#                          ".csv"))
end_iteration <- Sys.time()
time_iteration <- end_iteration - start_iteration
cat(paste0(counter, "/", len), ":  ")
cat(time_iteration, "\n")
}
}
}
}
}
TestPower
(1-pi_ne)
1-(pi_ne*risk)
max( 1-(pi_ne*risk), (1-pi_ne)) - pi_ne/2
list_of_original_samples <- list_of_samples[[8]]
list_of_original_samples
sample_tmp_A_e <- list_of_original_samples[["A"]][list_of_original_samples[["A"]]$E==1,]
sample_tmp_B_e <- list_of_original_samples[["B"]][list_of_original_samples[["B"]]$E==1,]
sample_tmp_C_e <- list_of_original_samples[["C"]][list_of_original_samples[["C"]]$E==1,]
sample_tmp_A_ne <- list_of_original_samples[["A"]][list_of_original_samples[["A"]]$E==0,]
sample_tmp_B_ne <- list_of_original_samples[["B"]][list_of_original_samples[["B"]]$E==0,]
sample_tmp_C_ne <- list_of_original_samples[["C"]][list_of_original_samples[["C"]]$E==0,]
TX_boot = c()
for (v in 1:nboot) {
#original_sample_A_e <- list_of_original_samples[["A"]][list_of_original_samples[["A"]]$E==1]
boot_sample_tmp_A = rbind(sample_tmp_A_e[sample(nrow(sample_tmp_A_e), na_e, replace = TRUE),],
sample_tmp_A_ne[sample(nrow(sample_tmp_A_ne), na_ne, replace = TRUE),])
boot_sample_tmp_B = rbind(sample_tmp_B_e[sample(nrow(sample_tmp_B_e), nb_e, replace = TRUE),],
sample_tmp_B_ne[sample(nrow(sample_tmp_B_ne), nb_ne, replace = TRUE),])
boot_sample_tmp_C= rbind(sample_tmp_C_e[sample(nrow(sample_tmp_C_e), nc_e, replace = TRUE),],
sample_tmp_C_ne[sample(nrow(sample_tmp_C_ne), nc_ne, replace = TRUE),])
# A=1 & E=1
PPV_A_e_tmp = (sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$Y==1 & boot_sample_tmp_A$E==1)) /
(sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==1))
PPV_A_e_tmp = ifelse(PPV_A_e_tmp>0 & (!is.na(PPV_A_e_tmp)) & PPV_A_e_tmp != Inf,
PPV_A_e_tmp,  1/(2*sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==1)))
# B=1 & E=1
PPV_B_e_tmp = (sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$Y==1 & boot_sample_tmp_B$E==1)) /
(sum(boot_sample_tmp_B$B==1 &  boot_sample_tmp_B$E==1))
PPV_B_e_tmp = ifelse(PPV_B_e_tmp>0 & (!is.na(PPV_B_e_tmp)) & PPV_B_e_tmp != Inf,
PPV_B_e_tmp,  1/(2*sum(boot_sample_tmp_B$B==1 &  boot_sample_tmp_B$E==1)))
# C=1 & E=1
PPV_C_e_tmp = (sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$Y==1 & boot_sample_tmp_C$E==0)) /
(sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0))
PPV_C_e_tmp = ifelse(PPV_C_e_tmp>0 & (!is.na(PPV_C_e_tmp)) & PPV_C_e_tmp != Inf,
PPV_C_e_tmp,  1/(2*sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0)))
# A=1 & E=0
PPV_A_ne_tmp = (sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$Y==1 & boot_sample_tmp_A$E==0)) /
(sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==0))
PPV_A_ne_tmp = ifelse(PPV_A_ne_tmp>0 & (!is.na(PPV_A_ne_tmp)) & PPV_A_ne_tmp != Inf,
PPV_A_ne_tmp,  1/(2*sum(boot_sample_tmp_A$A==1 & boot_sample_tmp_A$E==0)))
# B=1 & E=0
PPV_B_ne_tmp = (sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$Y==1 & boot_sample_tmp_B$E==0)) /
(sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$E==0))
PPV_B_ne_tmp = ifelse(PPV_B_ne_tmp>0 & (!is.na(PPV_B_ne_tmp)) & PPV_B_ne_tmp != Inf,
PPV_B_ne_tmp,  1/(2*sum(boot_sample_tmp_B$B==1 & boot_sample_tmp_B$E==0)))
# C=1 & E=0
PPV_C_ne_tmp = (sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$Y==1 & boot_sample_tmp_C$E==0)) /
(sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0))
PPV_C_ne_tmp = ifelse(PPV_C_ne_tmp>0 & (!is.na(PPV_C_ne_tmp)) & PPV_C_ne_tmp != Inf,
PPV_C_ne_tmp,  1/(2*sum(boot_sample_tmp_C$C==1 & boot_sample_tmp_C$E==0)))
# Test Statistic
TX_boot[v] = statistic_with_C_sample(P_A_e = P_A_e,
P_B_e = P_B_e,
P_C_e = P_C_e,
P_A_ne = P_A_ne,
P_B_ne = P_B_ne,
P_C_ne = P_C_ne,
PPV_A_e =  PPV_A_e_tmp,
PPV_B_e =  PPV_B_e_tmp,
PPV_C_e =  PPV_C_e_tmp,
PPV_A_ne = PPV_A_ne_tmp,
PPV_B_ne =  PPV_B_ne_tmp,
PPV_C_ne =  PPV_C_ne_tmp)
}
TX_boot
plot(TX_boot)
plot(density(TX_boot))
quant_025
quant_025 = quantile(TX_boot, 0.025, na.rm = T)
quant_975 = quantile(TX_boot, 0.975, na.rm = T)
line(quant_025 )
curve(quant_025 )
quant_975
quant_025
