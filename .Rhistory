for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power= c(power, rej_95)
################################################################################
###########################      point 2        ################################
################################################################################
## starting parameters
N = 20000; prop_exp= 0.2
pi_ne = 0.05; risk = 2
pi_e = pi_ne*risk
## validation indices: exposed
SE_A_e=0.5
SE_B_e=0.4
SE_AintB_e = 0.1
SP_A_e = 0.99
SP_B_e=0.95
SP_AintB_e = 1-((1-SP_A_e)*(1-SP_B_e))
## validation indices: non-exposed
SE_A_ne = 0.5
SE_B_ne = 0.4
SE_AintB_ne = 0.1
SP_A_ne = 0.99
SP_B_ne = 0.95
SP_AintB_ne = 1-((1-SP_A_ne)*(1-SP_B_ne))
## Population: Non-Exposed
N_non_exposed=(1-prop_exp)*N
E_0=rep(0, N_non_exposed)
Y_0_ne=rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne=rep(1,N_non_exposed*pi_ne)
Y_ne=c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed=(prop_exp)*N
E_1=rep(1,N_exposed)
Y_0_e=rep(0,N_exposed*(1-pi_e))
Y_1_e=rep(1,N_exposed*pi_e)
Y_e=c(Y_1_e, Y_0_e)
## Population: aggregated
Y=c(Y_e, Y_ne)
E=c(E_1, E_0)
data=data.table(E,Y)
data_E_Y = data[ ,.N, by=.(Y, E)][order(Y, E)]
# A non-exposed
A_TP_ne=rep(1, SE_A_ne*length(Y_1_ne))
A_FN_ne=rep(0, (1-SE_A_ne)*length(Y_1_ne))
A_FP_ne=rep(1, (1-SP_A_ne)*length(Y_0_ne))
A_TN_ne=rep(0, (SP_A_ne)*length(Y_0_ne))
A_ne=c(A_TP_ne, A_FN_ne,A_FP_ne, A_TN_ne)
# B non-exposed
B_FN_1_ne=rep(0, (SE_A_ne - SE_AintB_ne)*length(Y_1_ne))
B_TP_ne=rep(1, SE_B_ne*length(Y_1_ne))
B_FN_2_ne=rep(0, (1 - (SE_B_ne + (SE_A_ne - SE_AintB_ne)))*length(Y_1_ne))
B_TN_1_ne=rep(0, ((1-SP_A_ne)-(1-SP_AintB_ne))*length(Y_0_ne))
B_FP_ne=rep(1, (1-SP_B_ne)*length(Y_0_ne))
B_TN_2_ne=rep(0, (SP_B_ne - ((1-SP_A_ne)-(1-SP_AintB_ne)))*length(Y_0_ne))
B_ne=c(B_FN_1_ne, B_TP_ne, B_FN_2_ne, B_TN_1_ne, B_FP_ne, B_TN_2_ne)
# A exposed
A_TP_e=rep(1, SE_A_e*length(Y_1_e))
A_FN_e=rep(0, (1-SE_A_e)*length(Y_1_e))
A_FP_e=rep(1, (1-SP_A_e)*length(Y_0_e))
A_TN_e=rep(0, (SP_A_e)*length(Y_0_e))
A_e=c(A_TP_e, A_FN_e,A_FP_e, A_TN_e)
# B exposed
B_FN_1_e=rep(0, (SE_A_e - SE_AintB_e)*length(Y_1_e))
B_TP_e=rep(1, SE_B_e*length(Y_1_e))
B_FN_2_e=rep(0, (1 - (SE_B_e + (SE_A_e - SE_AintB_e)))*length(Y_1_e))
B_TN_1_e=rep(0, ((1-SP_A_e)-(1-SP_AintB_e))*length(Y_0_e))
B_FP_e=rep(1, (1-SP_B_e)*length(Y_0_e))
B_TN_2_e=rep(0, (SP_B_e - ((1-SP_A_e)-(1-SP_AintB_e)))*length(Y_0_e))
B_e=c(B_FN_1_e, B_TP_e, B_FN_2_e, B_TN_1_e, B_FP_e, B_TN_2_e)
## Algorithm: aggregated
A=c(A_e, A_ne)
if(length(A)<N){
diff=N-length(A)
A=c(A, rep(0, diff))
}
if(length(A)>N){
A=A[1:N]
}
B=c(B_e, B_ne)
if(length(B)<N){
diff=N-length(B)
B=c(B, rep(0, diff))
}
if(length(A)>N){
B=B[1:N]
}
## Algorithm: C (intersection)
C=ifelse(A==1&B==1, 1 , 0)
data=data.table(E, Y, A, B, C)
data_aggregated = data[ , .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E0 = data[ E==0, .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E1 = data[ E==1, .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E0
data_aggregated_E1
print(data_aggregated)
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
n=nb=250
nsam = 1000
P_A_e = sum(A==1&E==1)/sum(E==1)
P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power= c(power, rej_95)
################################################################################
###########################       point 3       ################################
################################################################################
## starting parameters
N = 20000; prop_exp= 0.2
pi_ne = 0.05; risk = 2
pi_e = pi_ne*risk
## validation indices: exposed
SE_A_e=0.6
SE_B_e=0.3
SE_AintB_e = 0.1
SP_A_e = 0.99
SP_B_e=0.95
SP_AintB_e = 1-((1-SP_A_e)*(1-SP_B_e))
## validation indices: non-exposed
SE_A_ne = 0.5
SE_B_ne = 0.4
SE_AintB_ne = 0.1
SP_A_ne = 0.99
SP_B_ne = 0.95
SP_AintB_ne = 1-((1-SP_A_ne)*(1-SP_B_ne))
## Population: Non-Exposed
N_non_exposed=(1-prop_exp)*N
E_0=rep(0, N_non_exposed)
Y_0_ne=rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne=rep(1,N_non_exposed*pi_ne)
Y_ne=c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed=(prop_exp)*N
E_1=rep(1,N_exposed)
Y_0_e=rep(0,N_exposed*(1-pi_e))
Y_1_e=rep(1,N_exposed*pi_e)
Y_e=c(Y_1_e, Y_0_e)
## Population: aggregated
Y=c(Y_e, Y_ne)
E=c(E_1, E_0)
data=data.table(E,Y)
data_E_Y = data[ ,.N, by=.(Y, E)][order(Y, E)]
# A non-exposed
A_TP_ne=rep(1, SE_A_ne*length(Y_1_ne))
A_FN_ne=rep(0, (1-SE_A_ne)*length(Y_1_ne))
A_FP_ne=rep(1, (1-SP_A_ne)*length(Y_0_ne))
A_TN_ne=rep(0, (SP_A_ne)*length(Y_0_ne))
A_ne=c(A_TP_ne, A_FN_ne,A_FP_ne, A_TN_ne)
# B non-exposed
B_FN_1_ne=rep(0, (SE_A_ne - SE_AintB_ne)*length(Y_1_ne))
B_TP_ne=rep(1, SE_B_ne*length(Y_1_ne))
B_FN_2_ne=rep(0, (1 - (SE_B_ne + (SE_A_ne - SE_AintB_ne)))*length(Y_1_ne))
B_TN_1_ne=rep(0, ((1-SP_A_ne)-(1-SP_AintB_ne))*length(Y_0_ne))
B_FP_ne=rep(1, (1-SP_B_ne)*length(Y_0_ne))
B_TN_2_ne=rep(0, (SP_B_ne - ((1-SP_A_ne)-(1-SP_AintB_ne)))*length(Y_0_ne))
B_ne=c(B_FN_1_ne, B_TP_ne, B_FN_2_ne, B_TN_1_ne, B_FP_ne, B_TN_2_ne)
# A exposed
A_TP_e=rep(1, SE_A_e*length(Y_1_e))
A_FN_e=rep(0, (1-SE_A_e)*length(Y_1_e))
A_FP_e=rep(1, (1-SP_A_e)*length(Y_0_e))
A_TN_e=rep(0, (SP_A_e)*length(Y_0_e))
A_e=c(A_TP_e, A_FN_e,A_FP_e, A_TN_e)
# B exposed
B_FN_1_e=rep(0, (SE_A_e - SE_AintB_e)*length(Y_1_e))
B_TP_e=rep(1, SE_B_e*length(Y_1_e))
B_FN_2_e=rep(0, (1 - (SE_B_e + (SE_A_e - SE_AintB_e)))*length(Y_1_e))
B_TN_1_e=rep(0, ((1-SP_A_e)-(1-SP_AintB_e))*length(Y_0_e))
B_FP_e=rep(1, (1-SP_B_e)*length(Y_0_e))
B_TN_2_e=rep(0, (SP_B_e - ((1-SP_A_e)-(1-SP_AintB_e)))*length(Y_0_e))
B_e=c(B_FN_1_e, B_TP_e, B_FN_2_e, B_TN_1_e, B_FP_e, B_TN_2_e)
## Algorithm: aggregated
A=c(A_e, A_ne)
if(length(A)<N){
diff=N-length(A)
A=c(A, rep(0, diff))
}
if(length(A)>N){
A=A[1:N]
}
B=c(B_e, B_ne)
if(length(B)<N){
diff=N-length(B)
B=c(B, rep(0, diff))
}
if(length(A)>N){
B=B[1:N]
}
## Algorithm: C (intersection)
C=ifelse(A==1&B==1, 1 , 0)
data=data.table(E, Y, A, B, C)
data_aggregated = data[ , .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E0 = data[ E==0, .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E1 = data[ E==1, .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E0
data_aggregated_E1
print(data_aggregated)
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
n=nb=250
nsam = 1000
P_A_e = sum(A==1&E==1)/sum(E==1)
P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power= c(power, rej_95)
################################################################################
###########################        point 4      ################################
################################################################################
## starting parameters
N = 20000; prop_exp= 0.2
pi_ne = 0.05; risk = 2
pi_e = pi_ne*risk
## validation indices: exposed
SE_A_e=0.7
SE_B_e=0.2
SE_AintB_e = 0.1
SP_A_e = 0.99
SP_B_e=0.95
SP_AintB_e = 1-((1-SP_A_e)*(1-SP_B_e))
## validation indices: non-exposed
SE_A_ne = 0.5
SE_B_ne = 0.4
SE_AintB_ne = 0.1
SP_A_ne = 0.99
SP_B_ne = 0.95
SP_AintB_ne = 1-((1-SP_A_ne)*(1-SP_B_ne))
## Population: Non-Exposed
N_non_exposed=(1-prop_exp)*N
E_0=rep(0, N_non_exposed)
Y_0_ne=rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne=rep(1,N_non_exposed*pi_ne)
Y_ne=c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed=(prop_exp)*N
E_1=rep(1,N_exposed)
Y_0_e=rep(0,N_exposed*(1-pi_e))
Y_1_e=rep(1,N_exposed*pi_e)
Y_e=c(Y_1_e, Y_0_e)
## Population: aggregated
Y=c(Y_e, Y_ne)
E=c(E_1, E_0)
data=data.table(E,Y)
data_E_Y = data[ ,.N, by=.(Y, E)][order(Y, E)]
# A non-exposed
A_TP_ne=rep(1, SE_A_ne*length(Y_1_ne))
A_FN_ne=rep(0, (1-SE_A_ne)*length(Y_1_ne))
A_FP_ne=rep(1, (1-SP_A_ne)*length(Y_0_ne))
A_TN_ne=rep(0, (SP_A_ne)*length(Y_0_ne))
A_ne=c(A_TP_ne, A_FN_ne,A_FP_ne, A_TN_ne)
# B non-exposed
B_FN_1_ne=rep(0, (SE_A_ne - SE_AintB_ne)*length(Y_1_ne))
B_TP_ne=rep(1, SE_B_ne*length(Y_1_ne))
B_FN_2_ne=rep(0, (1 - (SE_B_ne + (SE_A_ne - SE_AintB_ne)))*length(Y_1_ne))
B_TN_1_ne=rep(0, ((1-SP_A_ne)-(1-SP_AintB_ne))*length(Y_0_ne))
B_FP_ne=rep(1, (1-SP_B_ne)*length(Y_0_ne))
B_TN_2_ne=rep(0, (SP_B_ne - ((1-SP_A_ne)-(1-SP_AintB_ne)))*length(Y_0_ne))
B_ne=c(B_FN_1_ne, B_TP_ne, B_FN_2_ne, B_TN_1_ne, B_FP_ne, B_TN_2_ne)
# A exposed
A_TP_e=rep(1, SE_A_e*length(Y_1_e))
A_FN_e=rep(0, (1-SE_A_e)*length(Y_1_e))
A_FP_e=rep(1, (1-SP_A_e)*length(Y_0_e))
A_TN_e=rep(0, (SP_A_e)*length(Y_0_e))
A_e=c(A_TP_e, A_FN_e,A_FP_e, A_TN_e)
# B exposed
B_FN_1_e=rep(0, (SE_A_e - SE_AintB_e)*length(Y_1_e))
B_TP_e=rep(1, SE_B_e*length(Y_1_e))
B_FN_2_e=rep(0, (1 - (SE_B_e + (SE_A_e - SE_AintB_e)))*length(Y_1_e))
B_TN_1_e=rep(0, ((1-SP_A_e)-(1-SP_AintB_e))*length(Y_0_e))
B_FP_e=rep(1, (1-SP_B_e)*length(Y_0_e))
B_TN_2_e=rep(0, (SP_B_e - ((1-SP_A_e)-(1-SP_AintB_e)))*length(Y_0_e))
B_e=c(B_FN_1_e, B_TP_e, B_FN_2_e, B_TN_1_e, B_FP_e, B_TN_2_e)
## Algorithm: aggregated
A=c(A_e, A_ne)
if(length(A)<N){
diff=N-length(A)
A=c(A, rep(0, diff))
}
if(length(A)>N){
A=A[1:N]
}
B=c(B_e, B_ne)
if(length(B)<N){
diff=N-length(B)
B=c(B, rep(0, diff))
}
if(length(A)>N){
B=B[1:N]
}
## Algorithm: C (intersection)
C=ifelse(A==1&B==1, 1 , 0)
data=data.table(E, Y, A, B, C)
data_aggregated = data[ , .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E0 = data[ E==0, .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E1 = data[ E==1, .N, by=.(E, Y, A, B, C)][order(E, Y, A, B, C)]
data_aggregated_E0
data_aggregated_E1
print(data_aggregated)
################################################################################
###########################      Bootstrap      ################################
################################################################################
# Sets A==1 and B==1
n=nb=250
nsam = 1000
P_A_e = sum(A==1&E==1)/sum(E==1)
P_A_ne = sum(A==1&E==0)/sum(E==0)
P_B_e = sum(B==1&E==1)/sum(E==1)
P_B_ne = sum(B==1&E==0)/sum(E==0)
P_C_e = sum(C==1&E==1)/sum(E==1)
P_C_ne = sum(C==1&E==0)/sum(E==0)
P_A =  sum(A==1)/N
P_B = sum(B==1)/N
P_c = sum(C==1)/N
c1 = P_B_e/P_A_e; c2 = P_B_ne/P_A_ne ; c3 = P_C_e/P_A_e ; c4 = P_C_ne/P_A_ne
matrix_A = as.data.frame(cbind(Y[A==1],A[A==1],E[A==1]))
matrix_B = as.data.frame(cbind(Y[B==1],B[B==1],E[B==1]))
colnames(matrix_A)=c("Y","A","E")
colnames(matrix_B)=c("Y","B","E")
#bootstrap_power
PPV_A_e = PPV_A_ne = PPV_B_e = PPV_B_ne = NULL
n1=n2=n3=n4=NULL
nboot=500
tx_boot=c()
TX_boot0=TX_boot2=matrix(0,nsam,nboot)
PPV_A_e0=PPV_A_ne0=PPV_B_e0=PPV_B_ne0=matrix(0,nsam,nboot)
PPV_A_e2=PPV_A_ne2=PPV_B_e2=PPV_B_ne2=matrix(0,nsam,nboot)
#set.seed(2908)
for(i in 1:nsam){
sam_Ya1 = matrix_A[sample(nrow(matrix_A),n),]
sam_Yb1 = matrix_B[sample(nrow(matrix_B),nb),]
for(j in 1:nboot){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
PPV_A_e0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==1))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1))
PPV_B_e0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==1))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1))
PPV_A_ne0[i,j] = (sum(sam_Ya_boot$A==1&sam_Ya_boot$Y==1&sam_Ya_boot$E==0))/(sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0))
PPV_B_ne0[i,j] = (sum(sam_Yb_boot$B==1&sam_Yb_boot$Y==1&sam_Yb_boot$E==0))/(sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0))
TX_boot0[i,j] = c1*PPV_B_e0[i,j]/PPV_A_e0[i,j]-c2*PPV_B_ne0[i,j]/PPV_A_ne0[i,j] - c3*max(PPV_B_e0[i,j],PPV_A_e0[i,j])/PPV_A_e0[i,j] + c4*max(PPV_B_ne0[i,j],PPV_A_ne0[i,j])/PPV_A_ne0[i,j]
}}
#set.seed(2908)
for(i in 1:nsam){
sam_Ya_boot = sam_Ya1[sample(nrow(sam_Ya1), n, replace = TRUE),]
sam_Yb_boot = sam_Yb1[sample(nrow(sam_Yb1), nb, replace = TRUE),]
for(j in 1:nboot){
PPV_B_e2[i,j] = ifelse( PPV_B_e0[i,j]>0 & (!is.na(PPV_B_e0[i,j])) & PPV_B_e0[i,j] != Inf,
PPV_B_e0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==1)))
PPV_A_e2[i,j] = ifelse( PPV_A_e0[i,j]>0 & (!is.na(PPV_A_e0[i,j])) & PPV_A_e0[i,j] != Inf,
PPV_A_e0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==1)))
PPV_B_ne2[i,j] = ifelse( PPV_B_ne0[i,j]>0 & (!is.na(PPV_B_ne0[i,j])) & PPV_B_ne0[i,j] != Inf,
PPV_B_ne0[i,j],  1/(2*sum(sam_Yb_boot$B==1&sam_Yb_boot$E==0)))
PPV_A_ne2[i,j] = ifelse( PPV_A_ne0[i,j]>0 & (!is.na(PPV_A_ne0[i,j])) & PPV_A_ne0[i,j] != Inf,
PPV_A_ne0[i,j],  1/(2*sum(sam_Ya_boot$A==1&sam_Ya_boot$E==0)))
TX_boot2[i,j] = c1*PPV_B_e2[i,j]/PPV_A_e2[i,j]-c2*PPV_B_ne2[i,j]/PPV_A_ne2[i,j] - c3*max(PPV_B_e2[i,j],PPV_A_e2[i,j])/PPV_A_e2[i,j] + c4*max(PPV_B_ne2[i,j],PPV_A_ne2[i,j])/PPV_A_ne2[i,j]
}
}
quant_025 = quant_975 = c()
for(i in 1:nsam){
quant_025[i] = quantile(TX_boot2[i,],0.025)
quant_975[i] = quantile(TX_boot2[i,],0.975)
}
acc_95 = length(which(quant_025 < 0 & quant_975>0 ))/nsam
rej_95 = 1-acc_95
power= c(power, rej_95)
power
power
power=c(power, 6)
power=c(power, 8)
power=c(power, 0.05)
