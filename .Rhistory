B = NA
B = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
SE_binomial =c(SE_binomial, sum(A==1&E==1&Y=1)/sum(E==1&Y=1))
}
SE_binomial = c()
for (i in 1:100) {
Y = ifelse(E==1, sapply(E,function(pe){rbinom(1,1,pi_e)}),
sapply(E,function(pne){rbinom(1,1,pi_ne)}))
dati = data.table(cbind(E,Y))
start_time <- Sys.time()
A = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_A_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_A_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_A_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_A_ne)}), A))))
B = NA
B = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
SE_binomial =c(SE_binomial, sum(A==1&E==1&Y=1)/sum(E==1&Y=1))
}
SE_fixed = c()
SE_binomial = c()
for (i in 1:100) {
Y = ifelse(E==1, sapply(E,function(pe){rbinom(1,1,pi_e)}),
sapply(E,function(pne){rbinom(1,1,pi_ne)}))
dati = data.table(cbind(E,Y))
start_time <- Sys.time()
A = NA
A = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_A_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_A_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_A_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_A_ne)}), A))))
B = NA
B = ifelse(Y==1 & E==1, apply(dati, 1, function(SEe){rbinom(1, 1, SE_B_e)}),
ifelse(Y==1 & E==0, apply(dati, 1, function(SEne){rbinom(1, 1, SE_B_ne)}),
ifelse(Y==0 & E==1, apply(dati, 1, function(FPe){rbinom(1, 1, 1-SP_B_e)}),
ifelse(Y==0 & E==0, apply(dati, 1, function(FPne){rbinom(1, 1, 1-SP_B_ne)}), B))))
C = NA
C = A*B
SE_binomial = c(SE_binomial, sum(A==1&E==1&Y==1)/sum(E==1&Y==1))
}
for (i in 1:100) {
## Population: Non-Exposed
N_non_exposed=(1-prop_e)*N
E_0=rep(0, N_non_exposed)
Y_0_ne=rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne=rep(1, N_non_exposed*pi_ne)
Y_ne=c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed=(prop_e)*N
E_1=rep(1,N_exposed)
Y_0_e=rep(0,N_exposed*(1-pi_e))
Y_1_e=rep(1,N_exposed*pi_e)
Y_e=c(Y_1_e, Y_0_e)
## Population: aggregated
Y=c(Y_e, Y_ne)
if(length(Y)<N){
diff=N-length(Y)
Y=c(Y, rep(0, diff))
}
if(length(Y)>N){
Y=Y[1:N]
}
E=c(E_1, E_0)
if(length(E)<N){
diff=N-length(E)
E=c(E, rep(0, diff))
}
if(length(E)>N){
E=E[1:N]
}
data=data.table(E,Y)
data_E_Y = data[ ,.N, by=.(Y, E)][order(Y, E)]
# A non-exposed
A_TP_ne=rep(1, SE_A_ne*length(Y_1_ne))
A_FN_ne=rep(0, (1-SE_A_ne)*length(Y_1_ne))
A_FP_ne=rep(1, (1-SP_A_ne)*length(Y_0_ne))
A_TN_ne=rep(0, (SP_A_ne)*length(Y_0_ne))
A_ne=c(A_TP_ne, A_FN_ne,A_FP_ne, A_TN_ne)
# B non-exposed
B_TP_int_ne=rep(1, (SE_A_ne*SE_B_ne)*length(Y_1_ne))
B_FN_ne=rep(0, (1-SE_B_ne)*length(Y_1_ne))
B_TP_ne=rep(1, (SE_B_ne- (SE_A_ne*SE_B_ne))*length(Y_1_ne))
B_FP_int_ne=rep(1, ((1-SP_A_ne)*(1-SP_B_ne))*length(Y_0_ne))
B_TN_ne=rep(0, (1-(1-SP_B_ne))*length(Y_0_ne))
B_FP_ne=rep(1, ((1-SP_B_ne) - ((1-SP_A_ne)*(1-SP_B_ne)))*length(Y_0_ne))
B_ne=c(B_TP_int_ne, B_FN_ne, B_TP_ne, B_FP_int_ne, B_TN_ne, B_FP_ne)
# A exposed
A_TP_e=rep(1, SE_A_e*length(Y_1_e))
A_FN_e=rep(0, (1-SE_A_e)*length(Y_1_e))
A_FP_e=rep(1, (1-SP_A_e)*length(Y_0_e))
A_TN_e=rep(0, (SP_A_e)*length(Y_0_e))
A_e=c(A_TP_e, A_FN_e,A_FP_e, A_TN_e)
# B exposed
B_TP_int_e=rep(1, (SE_A_e*SE_B_e)*length(Y_1_e))
B_FN_e=rep(0, (1-SE_B_e)*length(Y_1_e))
B_TP_e=rep(1, (SE_B_e- (SE_A_e*SE_B_e))*length(Y_1_e))
B_FP_int_e=rep(1, ((1-SP_A_e)*(1-SP_B_e))*length(Y_0_e))
B_TN_e=rep(0, (1-(1-SP_B_e))*length(Y_0_e))
B_FP_e=rep(1, ((1-SP_B_e) - ((1-SP_A_e)*(1-SP_B_e)))*length(Y_0_e))
B_e=c(B_TP_int_e, B_FN_e, B_TP_e, B_FP_int_e, B_TN_e, B_FP_e)
## Algorithm: aggregated
A=c(A_e, A_ne)
if(length(A)<N){
diff=N-length(A)
A=c(A, rep(0, diff))
}
if(length(A)>N){
A=A[1:N]
}
B=c(B_e, B_ne)
if(length(B)<N){
diff=N-length(B)
B=c(B, rep(0, diff))
}
if(length(A)>N){
B=B[1:N]
}
## Algorithm: C (intersection)
C=ifelse(A==1&B==1, 1 , 0)
dati=data.table(E, Y, A, B, C)
SE_fixed = c(SE_binomial, dati[A==1&E==1&Y==1, .N]/ dati[E==1&Y==1])
}
var(SE_binomial)
var(SE_fixed)
dati[A==1&E==1&Y==1, .N]/ dati[E==1&Y==1]
dati
for (i in 1:100) {
## Population: Non-Exposed
N_non_exposed=(1-prop_e)*N
E_0=rep(0, N_non_exposed)
Y_0_ne=rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne=rep(1, N_non_exposed*pi_ne)
Y_ne=c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed=(prop_e)*N
E_1=rep(1,N_exposed)
Y_0_e=rep(0,N_exposed*(1-pi_e))
Y_1_e=rep(1,N_exposed*pi_e)
Y_e=c(Y_1_e, Y_0_e)
## Population: aggregated
Y=c(Y_e, Y_ne)
if(length(Y)<N){
diff=N-length(Y)
Y=c(Y, rep(0, diff))
}
if(length(Y)>N){
Y=Y[1:N]
}
E=c(E_1, E_0)
if(length(E)<N){
diff=N-length(E)
E=c(E, rep(0, diff))
}
if(length(E)>N){
E=E[1:N]
}
data=data.table(E,Y)
data_E_Y = data[ ,.N, by=.(Y, E)][order(Y, E)]
# A non-exposed
A_TP_ne=rep(1, SE_A_ne*length(Y_1_ne))
A_FN_ne=rep(0, (1-SE_A_ne)*length(Y_1_ne))
A_FP_ne=rep(1, (1-SP_A_ne)*length(Y_0_ne))
A_TN_ne=rep(0, (SP_A_ne)*length(Y_0_ne))
A_ne=c(A_TP_ne, A_FN_ne,A_FP_ne, A_TN_ne)
# B non-exposed
B_TP_int_ne=rep(1, (SE_A_ne*SE_B_ne)*length(Y_1_ne))
B_FN_ne=rep(0, (1-SE_B_ne)*length(Y_1_ne))
B_TP_ne=rep(1, (SE_B_ne- (SE_A_ne*SE_B_ne))*length(Y_1_ne))
B_FP_int_ne=rep(1, ((1-SP_A_ne)*(1-SP_B_ne))*length(Y_0_ne))
B_TN_ne=rep(0, (1-(1-SP_B_ne))*length(Y_0_ne))
B_FP_ne=rep(1, ((1-SP_B_ne) - ((1-SP_A_ne)*(1-SP_B_ne)))*length(Y_0_ne))
B_ne=c(B_TP_int_ne, B_FN_ne, B_TP_ne, B_FP_int_ne, B_TN_ne, B_FP_ne)
# A exposed
A_TP_e=rep(1, SE_A_e*length(Y_1_e))
A_FN_e=rep(0, (1-SE_A_e)*length(Y_1_e))
A_FP_e=rep(1, (1-SP_A_e)*length(Y_0_e))
A_TN_e=rep(0, (SP_A_e)*length(Y_0_e))
A_e=c(A_TP_e, A_FN_e,A_FP_e, A_TN_e)
# B exposed
B_TP_int_e=rep(1, (SE_A_e*SE_B_e)*length(Y_1_e))
B_FN_e=rep(0, (1-SE_B_e)*length(Y_1_e))
B_TP_e=rep(1, (SE_B_e- (SE_A_e*SE_B_e))*length(Y_1_e))
B_FP_int_e=rep(1, ((1-SP_A_e)*(1-SP_B_e))*length(Y_0_e))
B_TN_e=rep(0, (1-(1-SP_B_e))*length(Y_0_e))
B_FP_e=rep(1, ((1-SP_B_e) - ((1-SP_A_e)*(1-SP_B_e)))*length(Y_0_e))
B_e=c(B_TP_int_e, B_FN_e, B_TP_e, B_FP_int_e, B_TN_e, B_FP_e)
## Algorithm: aggregated
A=c(A_e, A_ne)
if(length(A)<N){
diff=N-length(A)
A=c(A, rep(0, diff))
}
if(length(A)>N){
A=A[1:N]
}
B=c(B_e, B_ne)
if(length(B)<N){
diff=N-length(B)
B=c(B, rep(0, diff))
}
if(length(A)>N){
B=B[1:N]
}
## Algorithm: C (intersection)
C=ifelse(A==1&B==1, 1 , 0)
dati=data.table(E, Y, A, B, C)
SE_fixed = c(SE_binomial, dati[A==1&E==1&Y==1, .N]/ dati[E==1&Y==1, .N])
}
var(SE_fixed)
var(SE_binomial)
data[, -c("i")]
rm(list=ls(all.names=TRUE))
### Setting the working directory
if (!require("rstudioapi")) install.packages("rstudioapi")
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
thisdir<-setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(thisdir)
### Loading parameters
source(paste0(thisdir,"/Parameters/ProgramParameters.R"))
source(paste0(thisdir,"/Parameters/TestParameters.R"))
## Population: Non-Exposed
N_non_exposed <- (1-prop_exp)*N
E_0           <- rep(0, N_non_exposed)
Y_0_ne <- rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne <- rep(1,N_non_exposed*pi_ne)
Y_ne   <- c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed <- (prop_exp)*N
E_1       <- rep(1,N_exposed)
Y_0_e <- rep(0,N_exposed*(1-pi_e))
Y_1_e <- rep(1,N_exposed*pi_e)
Y_e   <- c(Y_1_e, Y_0_e)
## Population: aggregated
Y <- c(Y_e, Y_ne)
E <- c(E_1, E_0)
data     <- data.table(E,Y)
data_E_Y <- data[ ,.N, by=.(Y, E)][order(Y, E)]
## Algorithm: A | E==0 & Y==1
data[Y==1 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==0 & i<(SE_A * max_i), A:= 1]
data[Y==1 & E==0 & is.na(A), A:= 0]
## Population: Non-Exposed
N_non_exposed <- (1-prop_exp)*N
E_0           <- rep(0, N_non_exposed)
Y_0_ne <- rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne <- rep(1,N_non_exposed*pi_ne)
Y_ne   <- c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed <- (prop_exp)*N
E_1       <- rep(1,N_exposed)
Y_0_e <- rep(0,N_exposed*(1-pi_e))
Y_1_e <- rep(1,N_exposed*pi_e)
Y_e   <- c(Y_1_e, Y_0_e)
## Population: aggregated
Y <- c(Y_e, Y_ne)
E <- c(E_1, E_0)
data     <- data.table(E,Y)
data_E_Y <- data[ ,.N, by=.(Y, E)][order(Y, E)]
## Algorithm: A | E==0 & Y==1
data[Y==1 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==0 & i<(SE_A_ne * max_i), A:= 1]
data[Y==1 & E==0 & is.na(A), A:= 0]
## Algorithm: A | E==1 & Y==1
data[Y==1 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==1 & i<(SE_A_e * max_i), A:= 1]
data[Y==1 & E==1 & is.na(A), A:= 0]
data_E_Y <- data[ ,.N, by=.(Y, E, A)][order(Y, E, A)]
data_E_Y_A <- data[ ,.N, by=.(Y, E, A)][order(Y, E, A)]
data_E_Y_A
## Population: Non-Exposed
N_non_exposed <- (1-prop_exp)*N
E_0           <- rep(0, N_non_exposed)
Y_0_ne <- rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne <- rep(1,N_non_exposed*pi_ne)
Y_ne   <- c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed <- (prop_exp)*N
E_1       <- rep(1,N_exposed)
Y_0_e <- rep(0,N_exposed*(1-pi_e))
Y_1_e <- rep(1,N_exposed*pi_e)
Y_e   <- c(Y_1_e, Y_0_e)
## Population: aggregated
Y <- c(Y_e, Y_ne)
E <- c(E_1, E_0)
data     <- data.table(E,Y)
data_E_Y <- data[ ,.N, by=.(Y, E)][order(Y, E)]
## Algorithm: A | E==0 & Y==1
data[Y==1 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==0 & i<(SE_A_ne * max_i), A:= 1]
data[Y==1 & E==0 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==1 & Y==1
data[Y==1 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==1 & i<(SE_A_e * max_i), A:= 1]
data[Y==1 & E==1 & is.na(A), A:= 0]
data[, -c("i")]
data_E_Y_A <- data[ ,.N, by=.(Y, E, A)][order(Y, E, A)]
data_E_Y_A
## Population: Non-Exposed
N_non_exposed <- (1-prop_exp)*N
E_0           <- rep(0, N_non_exposed)
Y_0_ne <- rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne <- rep(1,N_non_exposed*pi_ne)
Y_ne   <- c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed <- (prop_exp)*N
E_1       <- rep(1,N_exposed)
Y_0_e <- rep(0,N_exposed*(1-pi_e))
Y_1_e <- rep(1,N_exposed*pi_e)
Y_e   <- c(Y_1_e, Y_0_e)
## Population: aggregated
Y <- c(Y_e, Y_ne)
E <- c(E_1, E_0)
data     <- data.table(E,Y)
data_E_Y <- data[ ,.N, by=.(Y, E)][order(Y, E)]
## Algorithm: A | E==0 & Y==1
data[Y==1 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==0 & i<(SE_A_ne * max_i), A:= 1]
data[Y==1 & E==0 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==1 & Y==1
data[Y==1 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==1, i])
data[Y==1 & E==1 & i<(SE_A_e * max_i), A:= 1]
data[Y==1 & E==1 & is.na(A), A:= 0]
data[, -c("i")]
data_E_Y_A <- data[ ,.N, by=.(Y, E, A)][order(Y, E, A)]
data_E_Y_A
## Population: Non-Exposed
N_non_exposed <- (1-prop_exp)*N
E_0           <- rep(0, N_non_exposed)
Y_0_ne <- rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne <- rep(1,N_non_exposed*pi_ne)
Y_ne   <- c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed <- (prop_exp)*N
E_1       <- rep(1,N_exposed)
Y_0_e <- rep(0,N_exposed*(1-pi_e))
Y_1_e <- rep(1,N_exposed*pi_e)
Y_e   <- c(Y_1_e, Y_0_e)
## Population: aggregated
Y <- c(Y_e, Y_ne)
E <- c(E_1, E_0)
data     <- data.table(E,Y)
data_E_Y <- data[ ,.N, by=.(Y, E)][order(Y, E)]
###########
###  A  ###
###########
## Algorithm: A | E==0 & Y==1
data[Y==1 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==0 & i<(SE_A_ne * max_i), A:= 1]
data[Y==1 & E==0 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==1 & Y==1
data[Y==1 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==1, i])
data[Y==1 & E==1 & i<(SE_A_e * max_i), A:= 1]
data[Y==1 & E==1 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==0 & Y==0
data[Y==0 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==0 & E==0, i])
data[Y==0 & E==0 & i<((1-SP_A_ne) * max_i), A:= 1]
data[Y==0 & E==0 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==1 & Y==0
data[Y==0 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==0 & E==1, i])
data[Y==0 & E==1 & i<((1-SP_A_e) * max_i), A:= 1]
data[Y==0 & E==1 & is.na(A), A:= 0]
data[, -c("i")]
data_E_Y_A <- data[ ,.N, by=.(Y, E, A)][order(Y, E, A)]
data_E_Y_A
## Algorithm: B | E==0 & Y==1 & A==1
data[Y==1 & E==0 & A==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==1, i])
## Algorithm: B | E==0 & Y==1 & A==1
data[Y==1 & E==0 & A==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==1, i])
data[Y==1 & E==0 & A==1 & i<(SE_B_given_A_e * max_i), B:= 1]
data[Y==1 & E==0 & A==1 & is.na(B), B:= 0]
SE_B_given_not_A_e <- SE_B_e - SE_A_int_B_e
SE_B_given_not_A_ne <- SE_B_ne - SE_A_int_B_ne
data[Y==1 & E==0 & A==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==0, i])
data[Y==1 & E==0 & A==0 & i<(SE_B_given_not_A_e * max_i), B:= 1]
data[Y==1 & E==0 & A==0 & is.na(B), B:= 0]
## Population: Non-Exposed
N_non_exposed <- (1-prop_exp)*N
E_0           <- rep(0, N_non_exposed)
Y_0_ne <- rep(0, N_non_exposed*(1-pi_ne))
Y_1_ne <- rep(1,N_non_exposed*pi_ne)
Y_ne   <- c(Y_1_ne, Y_0_ne)
## Population: Exposed
N_exposed <- (prop_exp)*N
E_1       <- rep(1,N_exposed)
Y_0_e <- rep(0,N_exposed*(1-pi_e))
Y_1_e <- rep(1,N_exposed*pi_e)
Y_e   <- c(Y_1_e, Y_0_e)
## Population: aggregated
Y <- c(Y_e, Y_ne)
E <- c(E_1, E_0)
data     <- data.table(E,Y)
data_E_Y <- data[ ,.N, by=.(Y, E)][order(Y, E)]
###########
###  A  ###
###########
## Algorithm: A | E==0 & Y==1
data[Y==1 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0, i])
data[Y==1 & E==0 & i<(SE_A_ne * max_i), A:= 1]
data[Y==1 & E==0 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==1 & Y==1
data[Y==1 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==1, i])
data[Y==1 & E==1 & i<(SE_A_e * max_i), A:= 1]
data[Y==1 & E==1 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==0 & Y==0
data[Y==0 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==0 & E==0, i])
data[Y==0 & E==0 & i<((1-SP_A_ne) * max_i), A:= 1]
data[Y==0 & E==0 & is.na(A), A:= 0]
data[, -c("i")]
## Algorithm: A | E==1 & Y==0
data[Y==0 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==0 & E==1, i])
data[Y==0 & E==1 & i<((1-SP_A_e) * max_i), A:= 1]
data[Y==0 & E==1 & is.na(A), A:= 0]
data[, -c("i")]
data_E_Y_A <- data[ ,.N, by=.(Y, E, A)][order(Y, E, A)]
###########
###  B  ###
###########
## Algorithm: B | E==0 & Y==1 & A==1
data[Y==1 & E==0 & A==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==1, i])
data[Y==1 & E==0 & A==1 & i<(SE_B_given_A_e * max_i), B:= 1]
data[Y==1 & E==0 & A==1 & is.na(B), B:= 0]
data[, -c("i")]
## Algorithm: B | E==0 & Y==1 & A==0
data[Y==1 & E==0 & A==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==0, i])
data[Y==1 & E==0 & A==0 & i<(SE_B_given_not_A_e * max_i), B:= 1]
data[Y==1 & E==0 & A==0 & is.na(B), B:= 0]
data[, -c("i")]
## Algorithm: B | E==1 & Y==1 & A==1
data[Y==1 & E==1 & A==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==1 & A==1, i])
data[Y==1 & E==1 & A==1 & i<(SE_B_given_A_ne * max_i), B:= 1]
data[Y==1 & E==1 & A==1 & is.na(B), B:= 0]
data[, -c("i")]
## Algorithm: B | E==1 & Y==1 & A==0
data[Y==1 & E==1 & A==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==1 & A==0, i])
data[Y==1 & E==1 & A==0 & i<(SE_B_given_not_A_ne * max_i), B:= 1]
data[Y==1 & E==1 & A==0 & is.na(B), B:= 0]
data[, -c("i")]
## Algorithm: B | E==0 & Y==0
data[Y==0 & E==0, i:= seq_along(1:.N)]
max_i <- max(data[Y==0 & E==0, i])
data[Y==0 & E==0 & i<((1-SP_B_ne) * max_i), B:= 1]
data[Y==0 & E==0 & is.na(B), B:= 0]
data[, -c("i")]
## Algorithm: B | E==1 & Y==0
data[Y==0 & E==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==0 & E==1, i])
data[Y==0 & E==1 & i<((1-SP_B_e) * max_i), B:= 1]
data[Y==0 & E==1 & is.na(B), B:= 0]
data[, -c("i")]
data_E_Y_A_B <- data[ ,.N, by=.(Y, E, A, B)][order(Y, E, A, B)]
data_E_Y_A_B
SE_B_given_A_e
## Algorithm: B | E==0 & Y==1 & A==1
data[Y==1 & E==0 & A==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==1, i])
data[Y==1 & E==0 & A==1 & i<(SE_B_given_A_e * max_i), B:= 1]
data[Y==1 & E==0 & A==1 & is.na(B), B:= 0]
data[, -c("i")]
## Algorithm: B | E==0 & Y==1 & A==1
data[Y==1 & E==0 & A==1, i:= seq_along(1:.N)]
max_i <- max(data[Y==1 & E==0 & A==1, i])
max_i
SE_B_given_A_e * max_i
data[Y==1 & E==0 & A==1 & i<(SE_B_given_A_e * max_i), B:= 1]
data[Y==1 & E==0 & A==1 & is.na(B), .N]
data[Y==1 & E==0 & A==1, .N]
data[Y==1 & E==0 & B==1, .N]
data[Y==1 & E==0 & B==0, .N]
data[Y==1 & E==0 & A==0, .N]
data[Y==1 & E==0 & A==0 & B==1, .N]
data[Y==1 & E==0 & A==0 & B==0, .N]
data[Y==1 & E==0 & A==1 & B==0, .N]
data[Y==1 & E==0 & A==1 & B==1, .N]
